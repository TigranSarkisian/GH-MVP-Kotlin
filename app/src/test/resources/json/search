{
  "total_count": 2,
  "incomplete_results": false,
  "items": [
    {
      "id": 41460833,
      "name": "Rogerio",
      "full_name": "Rogerio111/Rogerio",
      "owner": {
        "login": "Rogerio111",
        "id": 13990968,
        "avatar_url": "https://avatars0.githubusercontent.com/u/13990968?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rogerio111",
        "html_url": "https://github.com/Rogerio111",
        "followers_url": "https://api.github.com/users/Rogerio111/followers",
        "following_url": "https://api.github.com/users/Rogerio111/following{/other_user}",
        "gists_url": "https://api.github.com/users/Rogerio111/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Rogerio111/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Rogerio111/subscriptions",
        "organizations_url": "https://api.github.com/users/Rogerio111/orgs",
        "repos_url": "https://api.github.com/users/Rogerio111/repos",
        "events_url": "https://api.github.com/users/Rogerio111/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Rogerio111/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/Rogerio111/Rogerio",
      "description": "<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"description\" content=\"Eat cells smaller than you and don't get eaten by the bigger ones, as an MMO\"> <meta name=\"keywords\" content=\"agario, agar, io, cell, cells, virus, bacteria, blob, game, games, web game, html5, fun, flash\"> <meta name=\"robots\" content=\"index, follow\"> <meta name=\"viewport\" content=\"minimal-ui, width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"> <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"> <meta property=\"fb:app_id\" content=\"677505792353827\"/> <meta property=\"og:title\" content=\"Agar.io\"/> <meta property=\"og:description\" content=\"Eat cells smaller than you and don't get eaten by the bigger ones, as an MMO\"/> <meta property=\"og:url\" content=\"http://agar.io\"/> <meta property=\"og:image\" content=\"http://agar.io/img/1200x630.png\"/> <meta property=\"og:image:width\" content=\"1200\"/> <meta property=\"og:image:height\" content=\"630\"/> <meta property=\"og:type\" content=\"website\"/> <title>Agar.io</title> <link id=\"favicon\" rel=\"icon\" type=\"image/png\" href=\"favicon-32x32.png\"/>    <!-- Área de anuncio -->  <link href='https://fonts.googleapis.com/css?family=Ubuntu:700' rel='stylesheet' type='text/css'> <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\"> <link href=\"css/glyphicons-social.css\" rel=\"stylesheet\"> <link href=\"css/animate.css\" rel=\"stylesheet\"> <style>body{padding:0;margin:0;overflow:hidden;}#canvas{position:absolute;left:0;right:0;top:0;bottom:0;width:100%;height:100%;}form{margin-bottom:0px;}.btn-play,.btn-settings,.btn-spectate,.btn-play-guest,.btn-login,.btn-logout{display:block;float:left;height:35px;}.btn-spectate,.btn-logout{height:35px;display:block;width:110px;margin-left:10px;margin-bottom:5px;}#helloContainer[data-logged-in=\"0\"] .btn-play-guest{margin-left:5px;width:125px;}#helloContainer[data-logged-in=\"0\"] .btn-login{margin-left:5px;width:145px;}#helloContainer[data-logged-in=\"0\"] .agario-exp-bar,#helloContainer[data-logged-in=\"0\"] .progress-bar-star,#helloContainer[data-logged-in=\"0\"] #agario-main-buttons .agario-profile,#helloContainer[data-logged-in=\"0\"] .btn-play{display:none;}#helloContainer[data-logged-in=\"0\"] .btn-logout{display:none;}#helloContainer[data-logged-in=\"1\"] .btn-play{margin-left:5px;width:275px;}#helloContainer[data-logged-in=\"1\"] .btn-play-guest{display:none;}#helloContainer[data-logged-in=\"1\"] .btn-login{display:none;}.btn-settings{width:40px;}.btn-spectate{display:block;float:right;}#adsBottom{position:absolute;left:0;right:0;bottom:0;}#adsBottomInner{margin:0px auto;width:728px;height:90px;border:5px solid white;border-radius:5px 5px 0px 0px;background-color:#FFFFFF;box-sizing:content-box;}.region-message{display:none;margin-bottom:12px;margin-left:6px;margin-right:6px;text-align:center;}#preview {width: 30px;height: 30px;border-radius: 400px;border: 3px solid #17c834;margin: 1px 0;float: left; position: absolute;left: 52.7%; top:42.5%;}#nicks {width: 10%;float: left; position: absolute; left: 46%; top: 42.5%;}#nick{width:10%;padding: 0px; left: 46%; top: -12px;position: relative;}#locationKnown #region{width:100%;}#locationUnknown #region{margin-bottom:15px;}#gamemode{width:10%;float:right;top: -42.5%;right: 44%;position: relative;}.agario-panel{display:inline-block;width:350px;background-color:rgba(25, 28, 29, 0.72);margin:2px;border-radius:10px;padding:5px 15px 5px 15px;vertical-align:top;}.agario-side-panel{display:inline-block;width:220px;}#helloContainer,.connecting-panel{position:absolute;top:50%;left:50%;margin-right:-50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}#a300x250{width:300px;height:250px;background-repeat:no-repeat;background-size:contain;background-position:center center;}.agario-exp-bar{height:30px;position:relative;border:2px solid #01612B;}.agario-exp-bar .progress-bar{background-color:#338833;border-radius:0px 4px 4px 0px;-webkit-transition:none;transition:none;}.agario-exp-bar .progress-bar-text{font-size:12pt;cursor:default;opacity:0.75;color:#FFF;text-align:center;line-height:26px;text-shadow:0px 0px 3px #000000,-1px 0px 0px #000000,1px 0px 0px #000000,0px 1px 0px #000000,0px -1px 0px #000000,-1px -1px 0px #000000,1px 1px 0px #000000,-1px 1px 0px #000000,1px -1px 0px #000000;position:absolute;top:0;bottom:0;left:0;right:0;font-family:'Ubuntu',sans-serif;}#agario-results-table{width:100%;}#agario-results-table th{text-align:center;font-size:8pt;}#agario-results-table td{text-align:center;color:#999;font-size:11pt;padding-bottom:15px;}.progress-bar-star{position:absolute;top:-13px;right:-16px;width:50px;height:50px;background-image:url(\"img/star.png\");background-size:cover;-webkit-transform:rotate3d(0,0,1,10deg);transform:rotate3d(0,0,1,10deg);-webkit-animation-duration:1s;animation-duration:1s;-webkit-animation-delay:0s;animation-delay:0s;-webkit-animation-iteration-count:1;animation-iteration-count:1;cursor:default;color:#FFF;text-align:center;line-height:55px;font-size:12pt;text-shadow:0px 0px 3px #000000,-1px 0px 0px #000000,1px 0px 0px #000000,0px 1px 0px #000000,0px -1px 0px #000000,-1px -1px 0px #000000,1px 1px 0px #000000,-1px 1px 0px #000000,1px -1px 0px #000000;font-family:'Ubuntu',sans-serif;}.tooltip-inner{max-width:300px;}.agario-profile-panel{padding:15px 15px 15px 15px;}.agario-profile-panel .agario-profile-picture{float:left;display:block;width:64px;height:64px;border-radius:5px;border:2px solid #CCC;margin-right:6px;}.agario-profile-panel .agario-profile-name-container{float:left;display:table;width:120px;height:64px;position:relative;}.agario-profile-panel .agario-profile-name-container .agario-profile-name{display:table-cell;vertical-align:middle;text-align:center;font-weight:bold;}#helloContainer[data-has-account-data=\"0\"] .agario-profile-panel{display:none;}.agario-party,.agario-party-0,.agario-party-1,.agario-party-2,.agario-party-3,.agario-party-4,.agario-party-5,.agario-party-6{display:none;}#helloContainer[data-gamemode=\":party\"] .agario-party{display:block;position:relative;}#helloContainer[data-gamemode=\":party\"] .agario-promo{display:none;}#helloContainer[data-party-state=\"0\"] .agario-party-0{display:block;}#helloContainer[data-party-state=\"1\"] .agario-party-1{display:block;}#helloContainer[data-party-state=\"2\"] .agario-party-2{display:block;}#helloContainer[data-party-state=\"3\"] .agario-party-3{display:block;}#helloContainer[data-party-state=\"4\"] .agario-party-4{display:block;}#helloContainer[data-party-state=\"5\"] .agario-party-5{display:block;}#helloContainer[data-party-state=\"6\"] .agario-party-6{display:block;}.partyToken{margin-bottom:10px;}.side-container{vertical-align:top;display:inline-block;width:224px;}.cell-spinner{display:block;margin:0;}.creating-party-text{position:absolute;cursor:default;top:0;bottom:0;left:0;right:0;width:100%;height:100%;text-align:center;color:#FFF;font-size:24px;line-height:100px;text-shadow:0px 0px 3px #000000,-1px 0px 0px #000000,1px 0px 0px #000000,0px 1px 0px #000000,0px -1px 0px #000000,-1px -1px 0px #000000,1px 1px 0px #000000,-1px 1px 0px #000000,1px -1px 0px #000000;}.agario-results-0,.agario-results-1,.agario-results-2{display:none;}#helloContainer[data-results-state=\"0\"] .agario-results-0{display:block;}#helloContainer[data-results-state=\"1\"] .agario-results-1{display:block;}#helloContainer[data-results-state=\"2\"] .agario-results-2{display:block;}#options>label{display:block;width:94px;float:left;}#stats{position:relative;width:350px;height:581px;padding:0px 0px 300px 0px;overflow:hidden;}#statsPelletsContainer,#statsTimeAliveContainer,#statsHighestMassContainer,#statsTimeLeaderboardContainer,#statsPlayerCellsEatenContainer,#statsTopPositionContainer{position:absolute;width:100px;height:100px;}#statsPelletsContainer{top:30px;left:50px;}#statsHighestMassContainer{top:30px;right:50px;}#statsTimeAliveContainer{top:85px;left:50px;}#statsTimeLeaderboardContainer{top:85px;right:50px;}#statsPlayerCellsEatenContainer{top:140px;left:50px;}#statsTopPositionContainer{top:140px;right:50px;}#statsPellets{position:absolute;top:0;left:0;bottom:0;right:0;margin:auto;}#statsText{position:absolute;top:0;bottom:0;left:0;right:0;line-height:100px;font-size:23px;}#statsSubtext{position:absolute;bottom:0;left:0;right:0;line-height:60px;font-size:12px;color:#000;text-align:center;}#statsChartText{position:absolute;left:20px;bottom:250px;line-height:40px;font-size:40px;}#statsChartText,#statsText{cursor:default;color:#444;text-align:center;font-weight:bold;}#statsContinue{position:absolute;left:25px;right:25px;width:300px;bottom:295px;}#statsGraph{position:absolute;bottom:350px;left:0px;right:0px;opacity:0.4;}#s300x250{position:absolute;bottom:10px;left:25px;right:25px;width:300px;height:250px;}.tosBox{z-index:1000;position:absolute;bottom:0;right:0;background-color:#FFF;border-radius:5px 0px 0px 0px;padding:5px 10px;}</style> <script src=\"js/jquery.js\"></script> <script src=\"js/bootstrap.min.js\"></script> <script> i18n_lang = 'en'; i18n_dict = {   'en': {     'connecting': 'Connecting',     'connect_help': 'If you cannot connect to the servers, check if you have some anti virus or firewall blocking the connection.',     'play': 'Jogar',     'spectate': 'Observar O Jogo',     'login_and_play': 'Logar No Facebook',     'play_as_guest': 'Play as guest',     'share': 'Share',     'advertisement': 'Advertisement',     'privacy_policy': 'Privacy Policy',     'terms_of_service': 'Terms of Service',     'changelog': 'Changelog',     'instructions_mouse': 'Move your mouse to control your cell',     'instructions_space': 'Pressiona <b>Space</b> Para Duplica',     'instructions_w': 'Pressiona <b>W</b> Para Da Massa',     'gamemode_ffa': 'FFA',     'gamemode_teams': 'Time',     'gamemode_experimental': 'Experimental',     'region_select': ' -- Select a Region -- ',     'region_us_east': 'US East',     'region_us_west': 'US West',     'region_north_america': 'North America',     'region_south_america': 'South America',     'region_europe': 'Europe',     'region_turkey': 'Turkey',     'region_poland': 'Poland',     'region_east_asia': 'East Asia',     'region_russia': 'Russia',     'region_china': 'China',     'region_oceania': 'Oceania',     'region_australia': 'Australia',     'region_players': 'players',     'option_no_skins': 'Remover skins',     'option_no_names': 'Sem Nome',     'option_dark_theme': 'Tema Escuro',     'option_no_colors': 'Sem Cores',     'option_show_mass': 'Most. Massa',     'leaderboard': 'Leaderboard',     'unnamed_cell': 'Célula sem nome !\"',     'last_match_results': 'Last match results',     'score': 'Pontos',     'leaderboard_time': '',     'mass_eaten': 'Mass Eaten',     'top_position': 'Top Position',     'position_1': 'Primeiro',     'position_2': 'Segundo',     'position_3': 'Terceiro',     'position_4': 'Quarto',     'position_5': 'Quinto',     'position_6': 'Sexto',     'position_7': 'Setimo',     'position_8': 'Oitavo',     'position_9': 'Nono',     'position_10': 'Decimo',     'player_cells_eaten': 'Player Cells Eaten',     'survival_time': 'Survival Time',     'games_played': 'Games played',     'highest_mass': 'Massa Total',     'total_cells_eaten': 'Total cells eaten',     'total_mass_eaten': 'Total mass eaten',     'longest_survival': 'Longest survival',     'logout': 'Sair',     'stats': 'Stats',     'shop': 'Shop',     'party': 'Jogar Com Os Amigos',     'party_description': 'Play with your friends in the same map',     'create_party': 'Create',     'creating_party': 'Criando Ah partida...',     'join_party': 'Criar Partoda',     'back_button': 'Sair',     'joining_party': 'Connectando Na Sala ...',     'joined_party_instructions': 'You are now playing with this Sala:',     'party_join_error': 'There was a problem joining that party, please make sure the code is correct, or try creating another party',     'login_tooltip': 'Login with Facebook and get:<br\\xA0/><br /><br />Jogar the game with more mass!<br />Level up to get even more starting mass!',     'create_party_instructions': 'Give this link to your friends:',     'join_party_instructions': 'Your friend should have given you a code, type it here:',     'continue': 'Continuar',     'option_skip_stats': 'Pular Estatísticas',     'stats_food_eaten': 'Alim. ingeridos',     'stats_highest_mass': 'highest mass',     'stats_time_alive': 'Tempo Vivo',     'stats_leaderboard_time': 'Tempo no Rank',     'stats_cells_eaten': 'Células Ingeridas',     'stats_top_position': 'Posição Rankeada?',     '': ''   },   '?': {} }; i18n_lang = (window.navigator.userLanguage || window.navigator.language || 'en').split('-')[0]; if (!i18n_dict.hasOwnProperty(i18n_lang)) {   i18n_lang = 'en'; } i18n = i18n_dict[i18n_lang]; (function(window, $) {   function Init() {     g_drawLines = true;     PlayerStats();     setInterval(PlayerStats, 180000);     g_canvas = g_canvas_ = document.getElementById('canvas');     g_context = g_canvas.getContext('2d');     g_canvas.onmousedown = function(event) {       if (g_touchCapable) {         var deltaX = event.clientX - (5 + g_protocol / 5 / 2);         var deltaY = event.clientY - (5 + g_protocol / 5 / 2);         if (Math.sqrt(deltaX * deltaX + deltaY * deltaY) <= g_protocol / 5 / 2) {           SendPos();           SendCmd(17);           return;         }       }       g_mouseX = event.clientX;       g_mouseY = event.clientY;       UpdatePos();       SendPos();     };     g_canvas.onmousemove = function(event) {       g_mouseX = event.clientX;       g_mouseY = event.clientY;       UpdatePos();     };     g_canvas.onmouseup = function() {};     if (/firefox/i.test(navigator.userAgent)) {       document.addEventListener('DOMMouseScroll', WheelHandler, false);     } else {       document.body.onmousewheel = WheelHandler;     }     var spaceDown = false;     var cachedSkin = false;     var wkeyDown = false;     var keyEPressed = false; //EDITED     window.onkeydown = function(event) {       if (!(32 != event.keyCode || spaceDown)) {         SendPos();         SendCmd(17);         spaceDown = true;       }       if (!(81 != event.keyCode || cachedSkin)) {         SendCmd(18);         cachedSkin = true;       }       if (!(87 != event.keyCode || wkeyDown)) {         SendPos();         SendCmd(21);         wkeyDown = true;       }       if (69 == event.keyCode) { //EDITED            if (!keyEPressed) {            keyEPressed = true;            timerE();            }       }        if (27 == event.keyCode) {         __unmatched_10(300);       }     };     window.onkeyup = function(event) {       if (32 == event.keyCode) {         spaceDown = false;       }       if (87 == event.keyCode) {         wkeyDown = false;       }       if (81 == event.keyCode && cachedSkin) {         SendCmd(19);         cachedSkin = false;       }       if (69 == event.keyCode) { //EDITED                 if (keyEPressed) {                     keyEPressed = false;                 }             }     };      window.onblur = function() {       SendCmd(19);       wkeyDown = cachedSkin = spaceDown = keyEPressed = false; //EDITED     };     function timerE () { //EDITED       if (keyEPressed) {           SendPos();           SendCmd(21);           setInterval(timerE, 200);       }     }     window.onresize = ResizeHandler;     window.requestAnimationFrame(__unmatched_130);     setInterval(SendPos, 40);     if (g_region) {       $('#region').val(g_region);     }     SyncRegion();     SetRegion($('#region').val());     $.each(g_skinNamesA, function(v, node) { //EDITED             $(\"#nicks\").append($(\"<option></option>\").attr(\"value\", v).text(node));     });     if (0 == __unmatched_112 && g_region) {       Start();     }     __unmatched_10(0);     ResizeHandler();     if (window.location.hash && 6 <= window.location.hash.length) {       RenderLoop(window.location.hash);     }   }   function WheelHandler(event) {     g_zoom *= Math.pow(0.9, event.wheelDelta / -120 || event.detail || 0);     if(!isUnlimitedZoom) {     if (1 > g_zoom) {       g_zoom = 1;     }     if (g_zoom > 4 / g_scale) {       g_zoom = 4 / g_scale;        }     }   }   function UpdateTree() {     if (0.4 > g_scale) {       g_pointTree = null;     } else {       for (var minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY, maxSize = 0, i = 0; i < g_cells.length; i++) {         var cell = g_cells[i];         if (!(!cell.N() || cell.R || 20 >= cell.size * g_scale)) {           maxSize = Math.max(cell.size, maxSize);           minX = Math.min(cell.x, minX);           minY = Math.min(cell.y, minY);           maxX = Math.max(cell.x, maxX);           maxY = Math.max(cell.y, maxY);         }       }       g_pointTree = QTreeFactory.la({         ca: minX - (maxSize + 100),         da: minY - (maxSize + 100),         oa: maxX + (maxSize + 100),         pa: maxY + (maxSize + 100),         ma: 2,         na: 4       });       for (i = 0; i < g_cells.length; i++) {         if (cell = g_cells[i], cell.N() && !(20 >= cell.size * g_scale)) {           for (minX = 0; minX < cell.a.length; ++minX) {             minY = cell.a[minX].x;             maxX = cell.a[minX].y;             if (!(minY < g_viewX - g_protocol / 2 / g_scale || maxX < g_viewY - __unmatched_60 / 2 / g_scale || minY > g_viewX + g_protocol / 2 / g_scale || maxX > g_viewY + __unmatched_60 / 2 / g_scale)) {               g_pointTree.m(cell.a[minX]);             }           }         }       }     }   }   function UpdatePos() {     g_moveX = (g_mouseX - g_protocol / 2) / g_scale + g_viewX;     g_moveY = (g_mouseY - __unmatched_60 / 2) / g_scale + g_viewY;   }   function PlayerStats() {     if (null == g_regionLabels) {       g_regionLabels = {};       $('#region').children().each(function() {         var $this = $(this);         var val = $this.val();         if (val) {           g_regionLabels[val] = $this.text();         }       });     }     $.get('https://m.agar.io/info', function(data) {       var regionNumPlayers = {};       var region;       for (region in data.regions) {         var region_ = region.split(':')[0];         regionNumPlayers[region_] = regionNumPlayers[region_] || 0;         regionNumPlayers[region_] += data.regions[region].numPlayers;       }       for (region in regionNumPlayers) {         $('#region option[value=\"' + region + '\"]').text(g_regionLabels[region] + ' (' + regionNumPlayers[region] + ' players)');       }     }, 'json');   }   function HideOverlay() {     $('#adsBottom').hide();     $('#overlays').hide();     $('#stats').hide();     $('#mainPanel').hide();     __unmatched_141 = g_playerCellDestroyed = false;     SyncRegion();     if (window.googletag && window.googletag.pubads && window.googletag.pubads().clear) {       window.googletag.pubads().clear(window.aa.concat(window.ab));     }   }   function SetRegion(val) {     if (val && val != g_region) {       if ($('#region').val() != val) {         $('#region').val(val);       }       g_region = window.localStorage.location = val;       $('.region-message').hide();       $('.region-message.' + val).show();       $('.btn-needs-server').prop('disabled', false);       if (g_drawLines) {         Start();       }     }   }   function __unmatched_10(char) {     if (!(g_playerCellDestroyed || __unmatched_141)) {       $('#adsBottom').show();       g_nick = null;       __unmatched_13(window.aa);       if (1000 > char) {         qkeyDown = 1;       }       g_playerCellDestroyed = true;       $('#mainPanel').show();       if (0 < char) {         $('#overlays').fadeIn(char);       } else {         $('#overlays').show();       }     }   }   function Render(__unmatched_174) {     $('#helloContainer').attr('data-gamemode', __unmatched_174);     __unmatched_95 = __unmatched_174;     $('#gamemode').val(__unmatched_174);   }   function SyncRegion() {     if ($('#region').val()) {       window.localStorage.location = $('#region').val();     } else if (window.localStorage.location) {       $('#region').val(window.localStorage.location);     }     if ($('#region').val()) {       $('#locationKnown').append($('#region'));     } else {       $('#locationUnknown').append($('#region'));     }   }   function __unmatched_13(__unmatched_175) {     if (window.googletag) {       window.googletag.cmd.push(function() {         if (g_canRefreshAds) {           g_canRefreshAds = false;           setTimeout(function() {             g_canRefreshAds = true;           }, 60000 * g_refreshAdsCooldown);           if (window.googletag && window.googletag.pubads && window.googletag.pubads().refresh) {             window.googletag.pubads().refresh(__unmatched_175);           }         }       });     }   }   function __unmatched_14(i_) {     return window.i18n[i_] || window.i18n_dict.en[i_] || i_;   }   function FindGame() {     var __unmatched_177 = ++__unmatched_112;     console.log('Find ' + g_region + __unmatched_95);     $.ajax('https://m.agar.io/', {       error: function() {         setTimeout(FindGame, 1000);       },       success: function(__unmatched_178) {           __unmatched_178 = __unmatched_178.split('\\n');           Connect('ws://' + __unmatched_178[0], __unmatched_178[1]);       },       dataType: 'text',       method: 'POST',       cache: false,       crossDomain: true,       data: (g_region + __unmatched_95 || '?') + '\\n154669603'     });   }   function Start() {     if (g_drawLines && g_region) {       $('#connecting').show();       FindGame();     }   }   function Connect(address, ticket) {     if (points) {       points.onopen = null;       points.onmessage = null;       points.onclose = null;       try {         points.close();       } catch (exception) {}       points = null;     }     if (__unmatched_113.ip) {       address = 'ws://' + __unmatched_113.ip;     }     if (null != __unmatched_121) {       var __unmatched_181 = __unmatched_121;       __unmatched_121 = function() {         __unmatched_181(ticket);       };     }     if (g_secure) {       var parts = address.split(':');       address = parts[0] + 's://ip-' + parts[1].replace(/\\./g, '-').replace(/\\//g, '') + '.tech.agar.io:' + (+parts[2] + 2000);     }     g_playerCellIds = [];     g_playerCells = [];     g_cellsById = {};     g_cells = [];     g_destroyedCells = [];     g_scoreEntries = [];     g_leaderboardCanvas = g_scorePartitions = null;     g_maxScore = 0;     g_connectSuccessful = false;     console.log('Connecting to ' + address);     points = new WebSocket(address);     points.binaryType = 'arraybuffer';     points.onopen = function() {       var data;       console.log('socket open');       data = GetBuffer(5);       data.setUint8(0, 254);       data.setUint32(1, 5, true);       SendBuffer(data);       data = GetBuffer(5);       data.setUint8(0, 255);       data.setUint32(1, 154669603, true);       SendBuffer(data);       data = GetBuffer(1 + ticket.length);       data.setUint8(0, 80);       for (var i = 0; i < ticket.length; ++i) {         data.setUint8(i + 1, ticket.charCodeAt(i));       }       SendBuffer(data);       RefreshAds();     };     points.onmessage = MessageHandler;     points.onclose = CloseHandler;     points.onerror = function() {       console.log('socket error');     };   }   function GetBuffer(size) {     return new DataView(new ArrayBuffer(size));   }   function SendBuffer(data) {     points.send(data.buffer);   }   function CloseHandler() {     if (g_connectSuccessful) {       g_retryTimeout = 500;     }     console.log('socket close');     setTimeout(Start, g_retryTimeout);     g_retryTimeout *= 2;   }   function MessageHandler(data) {     Receive(new DataView(data.data));   }   function Receive(data) {     function __unmatched_190() {       for (var string = '';;) {         var char = data.getUint16(pos, true);         pos += 2;         if (0 == char) {           break;         }         string += String.fromCharCode(char);       }       return string;     }     var pos = 0;     if (240 == data.getUint8(pos)) {       pos += 5;     }     switch (data.getUint8(pos++)) {       case 16:         ParseCellUpdates(data, pos);         break;       case 17:         g_viewX_ = data.getFloat32(pos, true);         pos += 4;         g_viewY_ = data.getFloat32(pos, true);         pos += 4;         g_scale_ = data.getFloat32(pos, true);         pos += 4;         break;       case 20:         g_playerCells = [];         g_playerCellIds = [];         break;       case 21:         g_linesY_ = data.getInt16(pos, true);         pos += 2;         g_linesX_ = data.getInt16(pos, true);         pos += 2;         if (!g_ready) {           g_ready = true;           g_linesX = g_linesY_;           g_linesY = g_linesX_;         }         break;       case 32:         g_playerCellIds.push(data.getUint32(pos, true));         pos += 4;         break;       case 49:         if (null != g_scorePartitions) {           break;         }         var num = data.getUint32(pos, true);         var pos = pos + 4;         g_scoreEntries = [];         for (var i = 0; i < num; ++i) {           var id = data.getUint32(pos, true);           var pos = pos + 4;           g_scoreEntries.push({             id: id,             name: __unmatched_190()           });         }         UpdateLeaderboard();         break;       case 50:         g_scorePartitions = [];         num = data.getUint32(pos, true);         pos += 4;         for (i = 0; i < num; ++i) {           g_scorePartitions.push(data.getFloat32(pos, true));           pos += 4;         }         UpdateLeaderboard();         break;       case 64:         g_minX = data.getFloat64(pos, true);         pos += 8;         g_minY = data.getFloat64(pos, true);         pos += 8;         g_maxX = data.getFloat64(pos, true);         pos += 8;         g_maxY = data.getFloat64(pos, true);         pos += 8;         g_viewX_ = (g_maxX + g_minX) / 2;         g_viewY_ = (g_maxY + g_minY) / 2;         g_scale_ = 1;         if (0 == g_playerCells.length) {           g_viewX = g_viewX_;           g_viewY = g_viewY_;           g_scale = g_scale_;         }         break;       case 81:         var x = data.getUint32(pos, true);         var pos = pos + 4;         var __unmatched_196 = data.getUint32(pos, true);         var pos = pos + 4;         var __unmatched_197 = data.getUint32(pos, true);         var pos = pos + 4;         setTimeout(function() {           __unmatched_43({             e: x,             f: __unmatched_196,             d: __unmatched_197           });         }, 1200);     }   }   function ParseCellUpdates(data, pos) {     function __unmatched_202() {       for (var string = '';;) {         var id = data.getUint16(pos, true);         pos += 2;         if (0 == id) {           break;         }         string += String.fromCharCode(id);       }       return string;     }     function __unmatched_203() {       for (var __unmatched_218 = '';;) {         var r = data.getUint8(pos++);         if (0 == r) {           break;         }         __unmatched_218 += String.fromCharCode(r);       }       return __unmatched_218;     }     __unmatched_107 = g_time = Date.now();     if (!g_connectSuccessful) {       g_connectSuccessful = true;       __unmatched_24();     }     __unmatched_88 = false;     var num = data.getUint16(pos, true);     pos += 2;     for (var i = 0; i < num; ++i) {       var cellA = g_cellsById[data.getUint32(pos, true)];       var cellB = g_cellsById[data.getUint32(pos + 4, true)];       pos += 8;       if (cellA && cellB) {         cellB.X();         cellB.s = cellB.x;         cellB.t = cellB.y;         cellB.r = cellB.size;         cellB.J = cellA.x;         cellB.K = cellA.y;         cellB.q = cellB.size;         cellB.Q = g_time;         __unmatched_49(cellA, cellB);       }     }     for (i = 0;;) {       num = data.getUint32(pos, true);       pos += 4;       if (0 == num) {         break;       }       ++i;       var size;       var cellA = data.getInt32(pos, true);       pos += 4;       cellB = data.getInt32(pos, true);       pos += 4;       size = data.getInt16(pos, true);       pos += 2;       var flags = data.getUint8(pos++);       var y = data.getUint8(pos++);       var b = data.getUint8(pos++);       var y = __unmatched_40(flags << 16 | y << 8 | b);       var b = data.getUint8(pos++);       var isVirus = !!(b & 1);       var isAgitated = !!(b & 16);       var __unmatched_214 = null;       if (b & 2) {         pos += 4 + data.getUint32(pos, true);       }       if (b & 4) {         __unmatched_214 = __unmatched_203();       }       var name = __unmatched_202();       var flags = null;       if (g_cellsById.hasOwnProperty(num)) {         flags = g_cellsById[num];         flags.P();         flags.s = flags.x;         flags.t = flags.y;         flags.r = flags.size;         flags.color = y;       } else {         flags = new Cell(num, cellA, cellB, size, y, name);         g_cells.push(flags);         g_cellsById[num] = flags;         flags.ta = cellA;         flags.ua = cellB;       }       flags.h = isVirus;       flags.n = isAgitated;       flags.J = cellA;       flags.K = cellB;       flags.q = size;       flags.Q = g_time;       flags.ba = b;       flags.fa = __unmatched_214;       if (name) {         flags.B(name);       }       if (-1 != g_playerCellIds.indexOf(num) && -1 == g_playerCells.indexOf(flags)) {         g_playerCells.push(flags);         if (1 == g_playerCells.length) {           g_viewX = flags.x;           g_viewY = flags.y;           __unmatched_136();           document.getElementById('overlays').style.display = 'none';           cached = [];           __unmatched_139 = 0;           __unmatched_140 = g_playerCells[0].color;           __unmatched_142 = true;           __unmatched_143 = Date.now();           g_mode = __unmatched_146 = __unmatched_145 = 0;         }       }     }     cellA = data.getUint32(pos, true);     pos += 4;     for (i = 0; i < cellA; i++) {       num = data.getUint32(pos, true);       pos += 4;       flags = g_cellsById[num];       if (null != flags) {         flags.X();       }     }     if (__unmatched_88 && 0 == g_playerCells.length) {       __unmatched_144 = Date.now();       __unmatched_142 = false;       if (!(g_playerCellDestroyed || __unmatched_141)) {         if (__unmatched_148) {           __unmatched_13(window.ab);           ShowOverlay();           __unmatched_141 = true;           $('#overlays').fadeIn(3000);           $('#stats').show();         } else {           __unmatched_10(3000);         }       }     }   }   function __unmatched_24() {     $('#connecting').hide();     SendNick();     if (__unmatched_121) {       __unmatched_121();       __unmatched_121 = null;     }     if (null != __unmatched_123) {       clearTimeout(__unmatched_123);     }     __unmatched_123 = setTimeout(function() {       if (window.ga) {         ++__unmatched_124;         window.ga('set', 'dimension2', __unmatched_124);       }     }, 10000);   }   function SendPos() {     if (IsConnected()) {       var deltaY = g_mouseX - g_protocol / 2;       var delta = g_mouseY - __unmatched_60 / 2;       if (!(64 > deltaY * deltaY + delta * delta || 0.01 > Math.abs(g_lastMoveY - g_moveX) && 0.01 > Math.abs(g_lastMoveX - g_moveY))) {         g_lastMoveY = g_moveX;         g_lastMoveX = g_moveY;         deltaY = GetBuffer(21);         deltaY.setUint8(0, 16);         deltaY.setFloat64(1, g_moveX, true);         deltaY.setFloat64(9, g_moveY, true);         deltaY.setUint32(17, 0, true);         SendBuffer(deltaY);       }     }   }   function SendNick() {     if (IsConnected() && g_connectSuccessful && null != g_nick) {       var data = GetBuffer(1 + 2 * g_nick.length);       data.setUint8(0, 0);       for (var i = 0; i < g_nick.length; ++i) {         data.setUint16(1 + 2 * i, g_nick.charCodeAt(i), true);       }       SendBuffer(data);       g_nick = null;     }   }   function IsConnected() {     return null != points && points.readyState == points.OPEN;   }   function SendCmd(cmd) {     if (IsConnected()) {       var data = GetBuffer(1);       data.setUint8(0, cmd);       SendBuffer(data);     }   }   function RefreshAds() {     if (IsConnected() && null != __unmatched_108) {       var __unmatched_226 = GetBuffer(1 + __unmatched_108.length);       __unmatched_226.setUint8(0, 81);       for (var y = 0; y < __unmatched_108.length; ++y) {         __unmatched_226.setUint8(y + 1, __unmatched_108.charCodeAt(y));       }       SendBuffer(__unmatched_226);     }   }   function ResizeHandler() {     g_protocol = window.innerWidth;     __unmatched_60 = window.innerHeight;     g_canvas_.width = g_canvas.width = g_protocol;     g_canvas_.height = g_canvas.height = __unmatched_60;     var $dialog = $('#helloContainer');     $dialog.css('transform', 'none');     var dialogHeight = $dialog.height();     var height = window.innerHeight;     if (dialogHeight > height / 1.1) {       $dialog.css('transform', 'translate(-50%, -50%) scale(' + height / dialogHeight / 1.1 + ')');     } else {       $dialog.css('transform', 'translate(-50%, -50%)');     }     GetScore();   }   function ScaleModifier() {     var scale;     scale = 1 * Math.max(__unmatched_60 / 1080, g_protocol / 1920);     return scale *= g_zoom;   }   function __unmatched_32() {     if (0 != g_playerCells.length) {       for (var scale = 0, i = 0; i < g_playerCells.length; i++) {         scale += g_playerCells[i].size;       }       scale = Math.pow(Math.min(64 / scale, 1), 0.4) * ScaleModifier();       g_scale = (9 * g_scale + scale) / 10;     }   }   function GetScore() {     var x;     var time = Date.now();     ++__unmatched_75;     g_time = time;     if (0 < g_playerCells.length) {       __unmatched_32();       for (var y = x = 0, i = 0; i < g_playerCells.length; i++) {         g_playerCells[i].P();         x += g_playerCells[i].x / g_playerCells.length;         y += g_playerCells[i].y / g_playerCells.length;       }       g_viewX_ = x;       g_viewY_ = y;       g_scale_ = g_scale;       g_viewX = (g_viewX + x) / 2;       g_viewY = (g_viewY + y) / 2;     } else {       g_viewX = (29 * g_viewX + g_viewX_) / 30;       g_viewY = (29 * g_viewY + g_viewY_) / 30;       g_scale = (9 * g_scale + g_scale_ * ScaleModifier()) / 10;     }     UpdateTree();     UpdatePos();     if (!g_showTrails) {       g_context.clearRect(0, 0, g_protocol, __unmatched_60);     }     if (g_showTrails) {       g_context.fillStyle = g_showMass ? '#111111' : '#F2FBFF';       g_context.globalAlpha = 0.05;       g_context.fillRect(0, 0, g_protocol, __unmatched_60);       g_context.globalAlpha = 1;     } else {       DrawGrid();     }     g_cells.sort(function(A, B) {       return A.size == B.size ? A.id - B.id : A.size - B.size;     });     g_context.save();     g_context.translate(g_protocol / 2, __unmatched_60 / 2);     g_context.scale(g_scale, g_scale);     g_context.translate(-g_viewX, -g_viewY);     drawBorders();     drawLogo();     myMass = Math.min.apply(null, g_playerCells.map(function(r) {         return r.N();     }))      for (i = 0; i < g_destroyedCells.length; i++) {       g_destroyedCells[i].w(g_context);     }     for (i = 0; i < g_cells.length; i++) {       g_cells[i].w(g_context);     }     if (g_ready) {       g_linesX = (3 * g_linesX + g_linesY_) / 4;       g_linesY = (3 * g_linesY + g_linesX_) / 4;       g_context.save();       g_context.strokeStyle = '#FFAAAA';       g_context.lineWidth = 10;       g_context.lineCap = 'round';       g_context.lineJoin = 'round';       g_context.globalAlpha = 0.5;       g_context.beginPath();       for (i = 0; i < g_playerCells.length; i++) {         g_context.moveTo(g_playerCells[i].x, g_playerCells[i].y);         g_context.lineTo(g_linesX, g_linesY);       }       g_context.stroke();       g_context.restore();     }     g_context.restore();     if (g_leaderboardCanvas && g_leaderboardCanvas.width) {       g_context.drawImage(g_leaderboardCanvas, g_protocol - g_leaderboardCanvas.width - 10, 10);     }     g_maxScore = Math.max(g_maxScore, __unmatched_36());     if (0 != g_maxScore) {       if (null == g_cachedScore) {         g_cachedScore = new CachedCanvas(24, '#FFFFFF');       }       g_cachedScore.C(__unmatched_14('score') + ': ' + ~~(g_maxScore / 100));       y = g_cachedScore.L();       x = y.width;       g_context.globalAlpha = 0.2;       g_context.fillStyle = '#000000';       g_context.fillRect(10, __unmatched_60 - 10 - 24 - 10, x + 10, 34);       g_context.globalAlpha = 1;       g_context.drawImage(y, 15, __unmatched_60 - 10 - 24 - 5);     }     DrawSplitImage();     time = Date.now() - time;     if (time > 1000 / 60) {       g_pointNumScale -= 0.01;     } else if (time < 1000 / 65) {       g_pointNumScale += 0.01;     }     if (0.4 > g_pointNumScale) {       g_pointNumScale = 0.4;     }     if (1 < g_pointNumScale) {       g_pointNumScale = 1;     }     time = g_time - __unmatched_77;     if (!IsConnected() || g_playerCellDestroyed || __unmatched_141) {       qkeyDown += time / 2000;       if (1 < qkeyDown) {         qkeyDown = 1;       }     } else {       qkeyDown -= time / 300;       if (0 > qkeyDown) {         qkeyDown = 0;       }     }     if (0 < qkeyDown) {       g_context.fillStyle = '#000000';       g_context.globalAlpha = 0.5 * qkeyDown;       g_context.fillRect(0, 0, g_protocol, __unmatched_60);       g_context.globalAlpha = 1;     }     __unmatched_77 = g_time;   }   function DrawGrid() {     g_context.fillStyle = g_showMass ? '#111111' : '#F2FBFF';     g_context.fillRect(0, 0, g_protocol, __unmatched_60);     g_context.save();     g_context.strokeStyle = g_showMass ? '#AAAAAA' : '#000000';     g_context.globalAlpha = 0.2 * g_scale;     for (var width = g_protocol / g_scale, height = __unmatched_60 / g_scale, g_width = (-g_viewX + width / 2) % 50; g_width < width; g_width += 50) {       g_context.beginPath();       g_context.moveTo(g_width * g_scale - 0.5, 0);       g_context.lineTo(g_width * g_scale - 0.5, height * g_scale);       g_context.stroke();     }     for (g_width = (-g_viewY + height / 2) % 50; g_width < height; g_width += 50) {       g_context.beginPath();       g_context.moveTo(0, g_width * g_scale - 0.5);       g_context.lineTo(width * g_scale, g_width * g_scale - 0.5);       g_context.stroke();     }     g_context.restore();   }   function DrawSplitImage() {     if (g_touchCapable && g_splitImage.width) {       var size = g_protocol / 5;       g_context.drawImage(g_splitImage, 5, 5, size, size);     }   }   function __unmatched_36() {     for (var score = 0, i = 0; i < g_playerCells.length; i++) {       score += g_playerCells[i].q * g_playerCells[i].q;     }     return score;   }   function UpdateLeaderboard() {     g_leaderboardCanvas = null;     if (null != g_scorePartitions || 0 != g_scoreEntries.length) {       if (null != g_scorePartitions || g_showNames) {         g_leaderboardCanvas = document.createElement('canvas');         var context = g_leaderboardCanvas.getContext('2d');         var height = 60;         var height = null == g_scorePartitions ? height + 24 * g_scoreEntries.length : height + 180;         var scale = Math.min(200, 0.3 * g_protocol) / 200;         g_leaderboardCanvas.width = 200 * scale;         g_leaderboardCanvas.height = height * scale;         context.scale(scale, scale);         context.globalAlpha = 0.4;         context.fillStyle = '#000000';         context.fillRect(0, 0, 200, height);         context.globalAlpha = 1;         context.fillStyle = '#FFFFFF';         scale = null;         scale = __unmatched_14('leaderboard');         context.font = '30px Ubuntu';         context.fillText(scale, 100 - context.measureText(scale).width / 2, 40);         if (null == g_scorePartitions) {           for (context.font = '20px Ubuntu', height = 0; height < g_scoreEntries.length; ++height) {             scale = g_scoreEntries[height].name || __unmatched_14('unnamed_cell');             if (!g_showNames) {               scale = __unmatched_14('unnamed_cell');             }             if (-1 != g_playerCellIds.indexOf(g_scoreEntries[height].id)) {               if (g_playerCells[0].name) {                 scale = g_playerCells[0].name;               }               context.fillStyle = '#FFAAAA';             } else {               context.fillStyle = '#FFFFFF';             }             scale = height + 1 + '. ' + scale;             context.fillText(scale, 100 - context.measureText(scale).width / 2, 70 + 24 * height);           }         } else {           for (height = scale = 0; height < g_scorePartitions.length; ++height) {             var end = scale + g_scorePartitions[height] * Math.PI * 2;             context.fillStyle = g_teamColors[height + 1];             context.beginPath();             context.moveTo(100, 140);             context.arc(100, 140, 80, scale, end, false);             context.fill();             scale = end;           }         }       }     }   }   function __unmatched_38(__unmatched_250, __unmatched_251, __unmatched_252, __unmatched_253, __unmatched_254) {     this.V = __unmatched_250;     this.x = __unmatched_251;     this.y = __unmatched_252;     this.i = __unmatched_253;     this.b = __unmatched_254;   }   function Cell(id, x, y, size, color, name) {     this.id = id;     this.s = this.x = x;     this.t = this.y = y;     this.r = this.size = size;     this.color = color;     this.a = [];     this.W();     this.B(name);   }   function __unmatched_40(__unmatched_261) {     for (__unmatched_261 = __unmatched_261.toString(16); 6 > __unmatched_261.length;) {       __unmatched_261 = '0' + __unmatched_261;     }     return '#' + __unmatched_261;   }   function drawBorders() {       g_context.save()       g_context.beginPath();       g_context.lineWidth = 1;       g_context.strokeStyle = \"#F87B32\";       g_context.moveTo(getMapStartX(), getMapStartY());       g_context.lineTo(getMapStartX(), getMapEndY());       g_context.stroke();       g_context.moveTo(getMapStartX(), getMapStartY());       g_context.lineTo(getMapEndX(), getMapStartY());       g_context.stroke();       g_context.moveTo(getMapEndX(), getMapStartY());       g_context.lineTo(getMapEndX(), getMapEndY());       g_context.stroke();       g_context.moveTo(getMapStartX(), getMapEndY());       g_context.lineTo(getMapEndX(), getMapEndY());       g_context.stroke();       g_context.restore();   }   function drawLogo(){     var logoimage = new Image();     logoimage.src = \"img/split.png\";      var width = this.j / 2;     var dim = width / 2;     g_context.save();     g_context.beginPath();     g_context.strokeStyle = \"#F87B32\";     g_context.moveTo(getMapStartX()/2, getMapStartX()/2);     g_context.lineTo(getMapStartX()/2, getMapStartX()/2);     g_context.stroke();     g_context.restore();   }   function CachedCanvas(size, color, stroke, strokeColor) {     if (size) {       this.u = size;     }     if (color) {       this.S = color;     }     this.U = !!stroke;     if (strokeColor) {       this.v = strokeColor;     }   }   function __unmatched_42(__unmatched_266) {     for (var size_ = __unmatched_266.length, __unmatched_268, __unmatched_269; 0 < size_;) {       __unmatched_269 = Math.floor(Math.random() * size_);       size_--;       __unmatched_268 = __unmatched_266[size_];       __unmatched_266[size_] = __unmatched_266[__unmatched_269];       __unmatched_266[__unmatched_269] = __unmatched_268;     }   }   function __unmatched_43(g_socket, __unmatched_271) {     var noClip = '1' == $('#helloContainer').attr('data-has-account-data');     $('#helloContainer').attr('data-has-account-data', '1');     if (null == __unmatched_271 && window.localStorage.loginCache) {       var rand = JSON.parse(window.localStorage.loginCache);       rand.f = g_socket.f;       rand.d = g_socket.d;       rand.e = g_socket.e;       window.localStorage.loginCache = JSON.stringify(rand);     }     if (noClip) {       var __unmatched_274 = +$('.agario-exp-bar .progress-bar-text').first().text().split('/')[0];       var noClip = +$('.agario-exp-bar .progress-bar-text').first().text().split('/')[1].split(' ')[0];       var rand = $('.agario-profile-panel .progress-bar-star').first().text();       if (rand != g_socket.e) {         __unmatched_43({           f: noClip,           d: noClip,           e: rand         }, function() {           $('.agario-profile-panel .progress-bar-star').text(g_socket.e);           $('.agario-exp-bar .progress-bar').css('width', '100%');           $('.progress-bar-star').addClass('animated tada').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {             $('.progress-bar-star').removeClass('animated tada');           });           setTimeout(function() {             $('.agario-exp-bar .progress-bar-text').text(g_socket.d + '/' + g_socket.d + ' XP');             __unmatched_43({               f: 0,               d: g_socket.d,               e: g_socket.e             }, function() {               __unmatched_43(g_socket, __unmatched_271);             });           }, 1000);         });       } else {         var __unmatched_275 = Date.now();         var name = function() {           var deltaX;           deltaX = (Date.now() - __unmatched_275) / 1000;           deltaX = 0 > deltaX ? 0 : 1 < deltaX ? 1 : deltaX;           deltaX = deltaX * deltaX * (3 - 2 * deltaX);           $('.agario-exp-bar .progress-bar-text').text(~~(__unmatched_274 + (g_socket.f - __unmatched_274) * deltaX) + '/' + g_socket.d + ' XP');           $('.agario-exp-bar .progress-bar').css('width', (88 * (__unmatched_274 + (g_socket.f - __unmatched_274) * deltaX) / g_socket.d).toFixed(2) + '%');           if (1 > deltaX) {             window.requestAnimationFrame(name);           } else if (__unmatched_271) {             __unmatched_271();           }         };         window.requestAnimationFrame(name);       }     } else {       $('.agario-profile-panel .progress-bar-star').text(g_socket.e);       $('.agario-exp-bar .progress-bar-text').text(g_socket.f + '/' + g_socket.d + ' XP');       $('.agario-exp-bar .progress-bar').css('width', (88 * g_socket.f / g_socket.d).toFixed(2) + '%');       if (__unmatched_271) {         __unmatched_271();       }     }   }   function __unmatched_44(__unmatched_278) {     if ('string' == typeof __unmatched_278) {       __unmatched_278 = JSON.parse(__unmatched_278);     }     if (Date.now() + 1800000 > __unmatched_278.ka) {       $('#helloContainer').attr('data-logged-in', '0');     } else {       window.localStorage.loginCache = JSON.stringify(__unmatched_278);       __unmatched_108 = __unmatched_278.ha;       $('.agario-profile-name').text(__unmatched_278.name);       RefreshAds();       __unmatched_43({         f: __unmatched_278.f,         d: __unmatched_278.d,         e: __unmatched_278.e       });       $('#helloContainer').attr('data-logged-in', '1');     }   }   function __unmatched_45(data) {     data = data.split('\\n');     __unmatched_44({       name: data[0],       sa: data[1],       ha: data[2],       ka: 1000 * +data[3],       e: +data[4],       f: +data[5],       d: +data[6]     });   }   function UpdateScale(__unmatched_280) {     if ('connected' == __unmatched_280.status) {       var x = __unmatched_280.authResponse.accessToken;       window.FB.api('/me/picture?width=180&height=180', function(__unmatched_282) {         window.localStorage.fbPictureCache = __unmatched_282.data.url;         $('.agario-profile-picture').attr('src', __unmatched_282.data.url);       });       $('#helloContainer').attr('data-logged-in', '1');       if (null != __unmatched_108) {         $.ajax('https://m.agar.io/checkToken', {           error: function() {             __unmatched_108 = null;             UpdateScale(__unmatched_280);           },           success: function(__unmatched_283) {             __unmatched_283 = __unmatched_283.split('\\n');             __unmatched_43({               e: +__unmatched_283[0],               f: +__unmatched_283[1],               d: +__unmatched_283[2]             });           },           dataType: 'text',           method: 'POST',           cache: false,           crossDomain: true,           data: __unmatched_108         });       } else {         $.ajax('https://m.agar.io/facebookLogin', {           error: function() {             __unmatched_108 = null;             $('#helloContainer').attr('data-logged-in', '0');           },           success: __unmatched_45,           dataType: 'text',           method: 'POST',           cache: false,           crossDomain: true,           data: x         });       }     }   }   function RenderLoop(x) {     Render(':party');     $('#helloContainer').attr('data-party-state', '4');     x = decodeURIComponent(x).replace(/.*#/gim, '');     __unmatched_48('#' + window.encodeURIComponent(x));     $.ajax('https://m.agar.io/getToken', {       error: function() {         $('#helloContainer').attr('data-party-state', '6');       },       success: function(quick) {         quick = quick.split('\\n');         $('.partyToken').val('agar.io/#' + window.encodeURIComponent(x));         $('#helloContainer').attr('data-party-state', '5');         Render(':party');         Connect('ws://' + quick[0], x);       },       dataType: 'text',       method: 'POST',       cache: false,       crossDomain: true,       data: x     });   }   function __unmatched_48(__unmatched_286) {     if (window.history && window.history.replaceState) {       window.history.replaceState({}, window.document.title, __unmatched_286);     }   }   function __unmatched_49(__unmatched_287, __unmatched_288) {     var playerOwned = -1 != g_playerCellIds.indexOf(__unmatched_287.id);     var __unmatched_290 = -1 != g_playerCellIds.indexOf(__unmatched_288.id);     var __unmatched_291 = 30 > __unmatched_288.size;     if (playerOwned && __unmatched_291) {       ++__unmatched_139;     }     if (!(__unmatched_291 || !playerOwned || __unmatched_290)) {       ++__unmatched_146;     }   }   function __unmatched_50(__unmatched_292) {     __unmatched_292 = ~~__unmatched_292;     var color = (__unmatched_292 % 60).toString();     __unmatched_292 = (~~(__unmatched_292 / 60)).toString();     if (2 > color.length) {       color = '0' + color;     }     return __unmatched_292 + ':' + color;   }   function __unmatched_51() {     if (null == g_scoreEntries) {       return 0;     }     for (var i = 0; i < g_scoreEntries.length; ++i) {       if (-1 != g_playerCellIds.indexOf(g_scoreEntries[i].id)) {         return i + 1;       }     }     return 0;   }   function ShowOverlay() {     $('.stats-food-eaten').text(__unmatched_139);     $('.stats-time-alive').text(__unmatched_50((__unmatched_144 - __unmatched_143) / 1000));     $('.stats-leaderboard-time').text(__unmatched_50(__unmatched_145));     $('.stats-highest-mass').text(~~(g_maxScore / 100));     $('.stats-cells-eaten').text(__unmatched_146);     $('.stats-top-position').text(0 == g_mode ? ':(' : g_mode);     var g_height = document.getElementById('statsGraph');     if (g_height) {       var pointsAcc = g_height.getContext('2d');       var scale = g_height.width;       var g_height = g_height.height;       pointsAcc.clearRect(0, 0, scale, g_height);       if (2 < cached.length) {         for (var __unmatched_298 = 200, i = 0; i < cached.length; i++) {           __unmatched_298 = Math.max(cached[i], __unmatched_298);         }         pointsAcc.lineWidth = 3;         pointsAcc.lineCap = 'round';         pointsAcc.lineJoin = 'round';         pointsAcc.strokeStyle = __unmatched_140;         pointsAcc.fillStyle = __unmatched_140;         pointsAcc.beginPath();         pointsAcc.moveTo(0, g_height - cached[0] / __unmatched_298 * (g_height - 10) + 10);         for (i = 1; i < cached.length; i += Math.max(~~(cached.length / scale), 1)) {           for (var __unmatched_300 = i / (cached.length - 1) * scale, __unmatched_301 = [], __unmatched_302 = -20; 20 >= __unmatched_302; ++__unmatched_302) {             if (!(0 > i + __unmatched_302 || i + __unmatched_302 >= cached.length)) {               __unmatched_301.push(cached[i + __unmatched_302]);             }           }           __unmatched_301 = __unmatched_301.reduce(function(__unmatched_303, __unmatched_304) {               return __unmatched_303 + __unmatched_304;             }) / __unmatched_301.length / __unmatched_298;           pointsAcc.lineTo(__unmatched_300, g_height - __unmatched_301 * (g_height - 10) + 10);         }         pointsAcc.stroke();         pointsAcc.globalAlpha = 0.5;         pointsAcc.lineTo(scale, g_height);         pointsAcc.lineTo(0, g_height);         pointsAcc.fill();         pointsAcc.globalAlpha = 1;       }     }   }   if (!window.agarioNoInit) {     var __unmatched_53 = window.location.protocol;     var g_secure = 'https:' == __unmatched_53;     if (g_secure && -1 == window.location.search.indexOf('fb')) {       window.location.href = 'http://agar.io/';     } else {       var items = window.navigator.userAgent;       if (-1 != items.indexOf('Android')) {         if (window.ga) {           window.ga('send', 'event', 'MobileRedirect', 'PlayStore');         }         setTimeout(function() {           window.location.href = 'https://play.google.com/store/apps/details?id=com.miniclip.agar.io';         }, 1000);       } else if (-1 != items.indexOf('iPhone') || -1 != items.indexOf('iPad') || -1 != items.indexOf('iPod')) {         if (window.ga) {           window.ga('send', 'event', 'MobileRedirect', 'AppStore');         }         setTimeout(function() {           window.location.href = 'https://itunes.apple.com/app/agar.io/id995999703?mt=8&at=1l3vajp';         }, 1000);       } else {         var g_canvas_;         var g_context;         var g_canvas;         var g_protocol;         var __unmatched_60;         var g_pointTree = null;         var points = null;         var g_viewX = 0;         var g_viewY = 0;         var g_playerCellIds = [];         var g_playerCells = [];         var g_cellsById = {};         var g_cells = [];         var g_destroyedCells = [];         var g_scoreEntries = [];         var g_mouseX = 0;         var g_mouseY = 0;         var g_moveX = -1;         var g_moveY = -1;         var __unmatched_75 = 0;         var g_time = 0;         var __unmatched_77 = 0;         var g_nick = null;         var g_minX = 0;         var g_minY = 0;         var g_maxX = 10000;         var g_maxY = 10000;         var g_scale = 1;         var g_region = null;         var g_showSkins = true;         var g_showNames = true;         var g_noColors = false;         var __unmatched_88 = false;         var g_maxScore = 0;         var g_showMass = false;         var g_darkTheme = true;         var g_viewX_ = g_viewX = ~~((g_minX + g_maxX) / 2);         var g_viewY_ = g_viewY = ~~((g_minY + g_maxY) / 2);         var g_scale_ = 1;         var __unmatched_95 = '';         var g_scorePartitions = null;         var g_drawLines = false;         var g_ready = false;         var g_linesY_ = 0;         var g_linesX_ = 0;         var g_linesX = 0;         var g_linesY = 0;         var g_ABGroup = 0;         var g_teamColors = [           '#333333',           '#FF3333',           '#33FF33',           '#3333FF'         ];         var g_showTrails = false;         var g_connectSuccessful = false;         var __unmatched_107 = 0;         var __unmatched_108 = null;         var g_zoom = 1;         var qkeyDown = 1;         var g_playerCellDestroyed = false;         var __unmatched_112 = 0;         var __unmatched_113 = {};         (function() {           var point = window.location.search;           if ('?' == point.charAt(0)) {             point = point.slice(1);           }           for (var point = point.split('&'), __unmatched_306 = 0; __unmatched_306 < point.length; __unmatched_306++) {             var parts = point[__unmatched_306].split('=');             __unmatched_113[parts[0]] = parts[1];           }         }());         var g_touchCapable = 'ontouchstart' in window && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent);         var g_splitImage = new Image();         g_splitImage.src = 'img/split.png';         var canvasTest = document.createElement('canvas');         if ('undefined' == typeof console || 'undefined' == typeof DataView || 'undefined' == typeof WebSocket || null == canvasTest || null == canvasTest.getContext || null == window.localStorage) {           alert('You browser does not support this game, we recommend you to use Firefox to play this');         } else {           var g_regionLabels = null;           window.setNick = function(val) {             HideOverlay();             g_nick = val;             SendNick();             g_maxScore = 0;           };           window.setRegion = SetRegion;           window.setSkins = function(val) {             g_showSkins = val;           };           window.setUnlimitedZoom = function(val) {             isUnlimitedZoom = val;             };           window.setNames = function(val) {             g_showNames = val;           };           window.setDarkTheme = function(val) {             g_showMass = val;           };           window.setColors = function(val) {             g_noColors = val;           };           window.setShowMass = function(val) {             g_darkTheme = val;           };           window.spectate = function(val) {             isSpectating = val             g_nick = null;             SendCmd(1);             HideOverlay();           };           window.setLargeBlobBorders = function(val) {             isLargeBlobBorders = val;           }           window.setLargeNames = function(val) {             isLargeNames = val;           }           window.setVirusTransparent = function(val){             isVirusTransparent = val;           }           window.nicksChange = function() {                 var name = $(\"#nicks\").children(\"option\").filter(\":selected\").text();                 $(\"#nick\").val(name);                 if (-1 != g_skinNamesA.indexOf(name)) {                     $(\"#preview\").attr(\"src\", \"skins/\" + name + \".png\");                 }             };           window.getMapStartX = function() {             return g_minX;           }           window.getMapStartY = function() {             return g_minY;           }           window.getMapEndX = function() {             return g_maxX;           }           window.getMapEndY = function() {             return g_maxY;           }           window.setGameMode = function(val) {             if (val != __unmatched_95) {               if (':party' == __unmatched_95) {                 $('#helloContainer').attr('data-party-state', '0');               }               Render(val);               if (':party' != val) {                 Start();               }             }           };           window.setAcid = function(val) {             g_showTrails = val;           };           if (null != window.localStorage) {             if (null == window.localStorage.AB9) {               window.localStorage.AB9 = 0 + ~~(100 * Math.random());             }             g_ABGroup = +window.localStorage.AB9;             window.ABGroup = g_ABGroup;           }           $.get(__unmatched_53 + '//gc.agar.io', function(code) {             var __unmatched_317 = code.split(' ');             code = __unmatched_317[0];             __unmatched_317 = __unmatched_317[1] || '';             if (-1 == ['UA'].indexOf(code)) {               g_skinNamesA.push('ussr');             }             if (g_regionsByCC.hasOwnProperty(code)) {               if ('string' == typeof g_regionsByCC[code]) {                 if (!g_region) {                   SetRegion(g_regionsByCC[code]);                 } else if (g_regionsByCC[code].hasOwnProperty(__unmatched_317)) {                   if (!g_region) {                     SetRegion(g_regionsByCC[code][__unmatched_317]);                   }                 }               }             }           }, 'text');           if (window.ga) {             window.ga('send', 'event', 'User-Agent', window.navigator.userAgent, {               nonInteraction: 1             });           }           var g_canRefreshAds = true;           var g_refreshAdsCooldown = 0;           var g_regionsByCC = {             AF: 'JP-Tokyo',             AX: 'EU-London',             AL: 'EU-London',             DZ: 'EU-London',             AS: 'SG-Singapore',             AD: 'EU-London',             AO: 'EU-London',             AI: 'US-Atlanta',             AG: 'US-Atlanta',             AR: 'BR-Brazil',             AM: 'JP-Tokyo',             AW: 'US-Atlanta',             AU: 'SG-Singapore',             AT: 'EU-London',             AZ: 'JP-Tokyo',             BS: 'US-Atlanta',             BH: 'JP-Tokyo',             BD: 'JP-Tokyo',             BB: 'US-Atlanta',             BY: 'EU-London',             BE: 'EU-London',             BZ: 'US-Atlanta',             BJ: 'EU-London',             BM: 'US-Atlanta',             BT: 'JP-Tokyo',             BO: 'BR-Brazil',             BQ: 'US-Atlanta',             BA: 'EU-London',             BW: 'EU-London',             BR: 'BR-Brazil',             IO: 'JP-Tokyo',             VG: 'US-Atlanta',             BN: 'JP-Tokyo',             BG: 'EU-London',             BF: 'EU-London',             BI: 'EU-London',             KH: 'JP-Tokyo',             CM: 'EU-London',             CA: 'US-Atlanta',             CV: 'EU-London',             KY: 'US-Atlanta',             CF: 'EU-London',             TD: 'EU-London',             CL: 'BR-Brazil',             CN: 'CN-China',             CX: 'JP-Tokyo',             CC: 'JP-Tokyo',             CO: 'BR-Brazil',             KM: 'EU-London',             CD: 'EU-London',             CG: 'EU-London',             CK: 'SG-Singapore',             CR: 'US-Atlanta',             CI: 'EU-London',             HR: 'EU-London',             CU: 'US-Atlanta',             CW: 'US-Atlanta',             CY: 'JP-Tokyo',             CZ: 'EU-London',             DK: 'EU-London',             DJ: 'EU-London',             DM: 'US-Atlanta',             DO: 'US-Atlanta',             EC: 'BR-Brazil',             EG: 'EU-London',             SV: 'US-Atlanta',             GQ: 'EU-London',             ER: 'EU-London',             EE: 'EU-London',             ET: 'EU-London',             FO: 'EU-London',             FK: 'BR-Brazil',             FJ: 'SG-Singapore',             FI: 'EU-London',             FR: 'EU-London',             GF: 'BR-Brazil',             PF: 'SG-Singapore',             GA: 'EU-London',             GM: 'EU-London',             GE: 'JP-Tokyo',             DE: 'EU-London',             GH: 'EU-London',             GI: 'EU-London',             GR: 'EU-London',             GL: 'US-Atlanta',             GD: 'US-Atlanta',             GP: 'US-Atlanta',             GU: 'SG-Singapore',             GT: 'US-Atlanta',             GG: 'EU-London',             GN: 'EU-London',             GW: 'EU-London',             GY: 'BR-Brazil',             HT: 'US-Atlanta',             VA: 'EU-London',             HN: 'US-Atlanta',             HK: 'JP-Tokyo',             HU: 'EU-London',             IS: 'EU-London',             IN: 'JP-Tokyo',             ID: 'JP-Tokyo',             IR: 'JP-Tokyo',             IQ: 'JP-Tokyo',             IE: 'EU-London',             IM: 'EU-London',             IL: 'JP-Tokyo',             IT: 'EU-London',             JM: 'US-Atlanta',             JP: 'JP-Tokyo',             JE: 'EU-London',             JO: 'JP-Tokyo',             KZ: 'JP-Tokyo',             KE: 'EU-London',             KI: 'SG-Singapore',             KP: 'JP-Tokyo',             KR: 'JP-Tokyo',             KW: 'JP-Tokyo',             KG: 'JP-Tokyo',             LA: 'JP-Tokyo',             LV: 'EU-London',             LB: 'JP-Tokyo',             LS: 'EU-London',             LR: 'EU-London',             LY: 'EU-London',             LI: 'EU-London',             LT: 'EU-London',             LU: 'EU-London',             MO: 'JP-Tokyo',             MK: 'EU-London',             MG: 'EU-London',             MW: 'EU-London',             MY: 'JP-Tokyo',             MV: 'JP-Tokyo',             ML: 'EU-London',             MT: 'EU-London',             MH: 'SG-Singapore',             MQ: 'US-Atlanta',             MR: 'EU-London',             MU: 'EU-London',             YT: 'EU-London',             MX: 'US-Atlanta',             FM: 'SG-Singapore',             MD: 'EU-London',             MC: 'EU-London',             MN: 'JP-Tokyo',             ME: 'EU-London',             MS: 'US-Atlanta',             MA: 'EU-London',             MZ: 'EU-London',             MM: 'JP-Tokyo',             NA: 'EU-London',             NR: 'SG-Singapore',             NP: 'JP-Tokyo',             NL: 'EU-London',             NC: 'SG-Singapore',             NZ: 'SG-Singapore',             NI: 'US-Atlanta',             NE: 'EU-London',             NG: 'EU-London',             NU: 'SG-Singapore',             NF: 'SG-Singapore',             MP: 'SG-Singapore',             NO: 'EU-London',             OM: 'JP-Tokyo',             PK: 'JP-Tokyo',             PW: 'SG-Singapore',             PS: 'JP-Tokyo',             PA: 'US-Atlanta',             PG: 'SG-Singapore',             PY: 'BR-Brazil',             PE: 'BR-Brazil',             PH: 'JP-Tokyo',             PN: 'SG-Singapore',             PL: 'EU-London',             PT: 'EU-London',             PR: 'US-Atlanta',             QA: 'JP-Tokyo',             RE: 'EU-London',             RO: 'EU-London',             RU: 'RU-Russia',             RW: 'EU-London',             BL: 'US-Atlanta',             SH:",
      "fork": false,
      "url": "https://api.github.com/repos/Rogerio111/Rogerio",
      "forks_url": "https://api.github.com/repos/Rogerio111/Rogerio/forks",
      "keys_url": "https://api.github.com/repos/Rogerio111/Rogerio/keys{/key_id}",
      "collaborators_url": "https://api.github.com/repos/Rogerio111/Rogerio/collaborators{/collaborator}",
      "teams_url": "https://api.github.com/repos/Rogerio111/Rogerio/teams",
      "hooks_url": "https://api.github.com/repos/Rogerio111/Rogerio/hooks",
      "issue_events_url": "https://api.github.com/repos/Rogerio111/Rogerio/issues/events{/number}",
      "events_url": "https://api.github.com/repos/Rogerio111/Rogerio/events",
      "assignees_url": "https://api.github.com/repos/Rogerio111/Rogerio/assignees{/user}",
      "branches_url": "https://api.github.com/repos/Rogerio111/Rogerio/branches{/branch}",
      "tags_url": "https://api.github.com/repos/Rogerio111/Rogerio/tags",
      "blobs_url": "https://api.github.com/repos/Rogerio111/Rogerio/git/blobs{/sha}",
      "git_tags_url": "https://api.github.com/repos/Rogerio111/Rogerio/git/tags{/sha}",
      "git_refs_url": "https://api.github.com/repos/Rogerio111/Rogerio/git/refs{/sha}",
      "trees_url": "https://api.github.com/repos/Rogerio111/Rogerio/git/trees{/sha}",
      "statuses_url": "https://api.github.com/repos/Rogerio111/Rogerio/statuses/{sha}",
      "languages_url": "https://api.github.com/repos/Rogerio111/Rogerio/languages",
      "stargazers_url": "https://api.github.com/repos/Rogerio111/Rogerio/stargazers",
      "contributors_url": "https://api.github.com/repos/Rogerio111/Rogerio/contributors",
      "subscribers_url": "https://api.github.com/repos/Rogerio111/Rogerio/subscribers",
      "subscription_url": "https://api.github.com/repos/Rogerio111/Rogerio/subscription",
      "commits_url": "https://api.github.com/repos/Rogerio111/Rogerio/commits{/sha}",
      "git_commits_url": "https://api.github.com/repos/Rogerio111/Rogerio/git/commits{/sha}",
      "comments_url": "https://api.github.com/repos/Rogerio111/Rogerio/comments{/number}",
      "issue_comment_url": "https://api.github.com/repos/Rogerio111/Rogerio/issues/comments{/number}",
      "contents_url": "https://api.github.com/repos/Rogerio111/Rogerio/contents/{+path}",
      "compare_url": "https://api.github.com/repos/Rogerio111/Rogerio/compare/{base}...{head}",
      "merges_url": "https://api.github.com/repos/Rogerio111/Rogerio/merges",
      "archive_url": "https://api.github.com/repos/Rogerio111/Rogerio/{archive_format}{/ref}",
      "downloads_url": "https://api.github.com/repos/Rogerio111/Rogerio/downloads",
      "issues_url": "https://api.github.com/repos/Rogerio111/Rogerio/issues{/number}",
      "pulls_url": "https://api.github.com/repos/Rogerio111/Rogerio/pulls{/number}",
      "milestones_url": "https://api.github.com/repos/Rogerio111/Rogerio/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/Rogerio111/Rogerio/notifications{?since,all,participating}",
      "labels_url": "https://api.github.com/repos/Rogerio111/Rogerio/labels{/name}",
      "releases_url": "https://api.github.com/repos/Rogerio111/Rogerio/releases{/id}",
      "deployments_url": "https://api.github.com/repos/Rogerio111/Rogerio/deployments",
      "created_at": "2015-08-27T02:19:06Z",
      "updated_at": "2017-07-03T22:01:08Z",
      "pushed_at": "2015-08-27T02:19:06Z",
      "git_url": "git://github.com/Rogerio111/Rogerio.git",
      "ssh_url": "git@github.com:Rogerio111/Rogerio.git",
      "clone_url": "https://github.com/Rogerio111/Rogerio.git",
      "svn_url": "https://github.com/Rogerio111/Rogerio",
      "homepage": null,
      "size": 0,
      "stargazers_count": 2,
      "watchers_count": 2,
      "language": null,
      "has_issues": true,
      "has_projects": true,
      "has_downloads": true,
      "has_wiki": true,
      "has_pages": false,
      "forks_count": 0,
      "mirror_url": null,
      "archived": false,
      "open_issues_count": 1,
      "license": null,
      "forks": 0,
      "open_issues": 1,
      "watchers": 2,
      "default_branch": "master",
      "score": 0.25829464
    },
    {
      "id": 45329208,
      "name": "launcher.user.js",
      "full_name": "mochtamvan/launcher.user.js",
      "owner": {
        "login": "mochtamvan",
        "id": 15528443,
        "avatar_url": "https://avatars3.githubusercontent.com/u/15528443?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mochtamvan",
        "html_url": "https://github.com/mochtamvan",
        "followers_url": "https://api.github.com/users/mochtamvan/followers",
        "following_url": "https://api.github.com/users/mochtamvan/following{/other_user}",
        "gists_url": "https://api.github.com/users/mochtamvan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mochtamvan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mochtamvan/subscriptions",
        "organizations_url": "https://api.github.com/users/mochtamvan/orgs",
        "repos_url": "https://api.github.com/users/mochtamvan/repos",
        "events_url": "https://api.github.com/users/mochtamvan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mochtamvan/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/mochtamvan/launcher.user.js",
      "description": "/*The MIT License (MIT) Copyright (c) 2015 Apostolique Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/ // ==UserScript== // @name        AposLauncher // @namespace   AposLauncher // @include     http://agar.io/* // @version     4.148 // @grant       none // @author      http://www.twitch.tv/apostolique // ==/UserScript== var aposLauncherVersion = 4.148;  var showAd = true;  Number.prototype.mod = function(n) {     return ((this % n) + n) % n; };  Array.prototype.peek = function() {     return this[this.length - 1]; };  var sha = \"efde0488cc2cc176db48dd23b28a20b90314352b\";  function getLatestCommit() {     window.jQuery.ajax({         url: \"https://api.github.com/repos/apostolique/Agar.io-bot/git/refs/heads/master\",         cache: false,         dataType: \"jsonp\"     }).done(function(data) {         console.dir(data.data);         console.log(\"hmm: \" + data.data.object.sha);         sha = data.data.object.sha;          function update(prefix, name, url) {             window.jQuery(document.body).prepend(\"<div id='\" + prefix + \"Dialog' style='position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; z-index: 100; display: none;'>\");             window.jQuery('#' + prefix + 'Dialog').append(\"<div id='\" + prefix + \"Message' style='width: 350px; background-color: #FFFFFF; margin: 100px auto; border-radius: 15px; padding: 5px 15px 5px 15px;'>\");             window.jQuery('#' + prefix + 'Message').append(\"<h2>UPDATE TIME!!!</h2>\");             window.jQuery('#' + prefix + 'Message').append(\"<p>Grab the update for: <a id='\" + prefix + \"Link' href='\" + url + \"' target=\\\"_blank\\\">\" + name + \"</a></p>\");             window.jQuery('#' + prefix + 'Link').on('click', function() {                 window.jQuery(\"#\" + prefix + \"Dialog\").hide();                 window.jQuery(\"#\" + prefix + \"Dialog\").remove();             });             window.jQuery(\"#\" + prefix + \"Dialog\").show();         }          window.jQuery.get('https://raw.githubusercontent.com/Apostolique/Agar.io-bot/master/launcher.user.js?' + Math.floor((Math.random() * 1000000) + 1), function(data) {             var latestVersion = data.replace(/(\\r\\n|\\n|\\r)/gm, \"\");             latestVersion = latestVersion.substring(latestVersion.indexOf(\"// @version\") + 11, latestVersion.indexOf(\"// @grant\"));              latestVersion = parseFloat(latestVersion + 0.0000);             var myVersion = parseFloat(aposLauncherVersion + 0.0000);              if (latestVersion > myVersion) {                 update(\"aposLauncher\", \"launcher.user.js\", \"https://github.com/Apostolique/Agar.io-bot/blob/\" + sha + \"/launcher.user.js/\");             }             console.log('Current launcher.user.js Version: ' + myVersion + \" on Github: \" + latestVersion);         });      }).fail(function() {}); } getLatestCommit();  function addAd() {     window.google_ad_client = \"ca-pub-5878021809689194\";     window.google_ad_slot = \"1479874665\";     window.google_ad_width = 300;     window.google_ad_height = 250;      window.jQuery(\".side-container:last\").append(\"<div class='agario-panel'><center id='aposAd'></center></div>\");     var aposAd = document.getElementById('aposAd');     var w = document.write;     document.write = function (content) {         aposAd.innerHTML = content;         document.write = w;     };      var script = document.createElement('script');     script.type = 'text/javascript';     script.src = 'http://pagead2.googlesyndication.com/pagead/show_ads.js';     document.body.appendChild(script); }  if (showAd) {     addAd(); }  console.log(\"Running Bot Launcher!\"); (function(d, e) {      //UPDATE     function keyAction(e) {         if (84 == e.keyCode) {             console.log(\"Toggle\");             toggle = !toggle;         }         if (82 == e.keyCode) {             console.log(\"ToggleDraw\");             toggleDraw = !toggleDraw;         }         if (68 == e.keyCode) {             window.setDarkTheme(!getDarkBool());         }         if (70 == e.keyCode) {             window.setShowMass(!getMassBool());         }         if (69 == e.keyCode) {             if (message.length > 0) {                 window.setMessage([]);                 window.onmouseup = function() {};                 window.ignoreStream = true;             } else {                 window.ignoreStream = false;                 window.refreshTwitch();             }         }         window.botList[botIndex].keyAction(e);     }      function humanPlayer() {         //Don't need to do anything.         return [getPointX(), getPointY()];     }        function pb() {          //UPDATE          window.botList = window.botList || [];          window.jQuery('#nick').val(originalName);          function HumanPlayerObject() {             this.name = \"Human\";             this.keyAction = function(key) {};             this.displayText = function() {                 return [];             };             this.mainLoop = humanPlayer;         }          var hpo = new HumanPlayerObject();          window.botList.push(hpo);          window.updateBotList();          ya = !0;         Pa();         setInterval(Pa, 18E4);          var father = window.jQuery(\"#canvas\").parent();         window.jQuery(\"#canvas\").remove();         father.prepend(\"<canvas id='canvas'>\");          G = za = document.getElementById(\"canvas\");         f = G.getContext(\"2d\");         G.onmousedown = function(a) {             if (Qa) {                 var b = a.clientX - (5 + m / 5 / 2),                     c = a.clientY - (5 + m / 5 / 2);                 if (Math.sqrt(b * b + c * c) <= m / 5 / 2) {                     V();                     H(17);                     return                 }             }             fa = a.clientX;             ga = a.clientY;             Aa();             V();         };         G.onmousemove = function(a) {             fa = a.clientX;             ga = a.clientY;             Aa();         };         G.onmouseup = function() {};         /firefox/i.test(navigator.userAgent) ? document.addEventListener(\"DOMMouseScroll\", Ra, !1) : document.body.onmousewheel = Ra;         var a = !1,             b = !1,             c = !1;         d.onkeydown = function(l) {             //UPDATE             if (!window.jQuery('#nick').is(\":focus\")) {                 32 != l.keyCode || a || (V(), H(17), a = !0);                 81 != l.keyCode || b || (H(18), b = !0);                 87 != l.keyCode || c || (V(), H(21), c = !0);                 27 == l.keyCode && Sa(!0);                  //UPDATE                 keyAction(l);             }         };         d.onkeyup = function(l) {             32 == l.keyCode && (a = !1);             87 == l.keyCode && (c = !1);             81 == l.keyCode && b && (H(19), b = !1);         };         d.onblur = function() {             H(19);             c = b = a = !1         };         d.onresize = Ta;         d.requestAnimationFrame(Ua);         setInterval(V, 40);         y && e(\"#region\").val(y);         Va();         ha(e(\"#region\").val());         0 == Ba && y && I();         W = !0;         e(\"#overlays\").show();         Ta();         d.location.hash && 6 <= d.location.hash.length && Wa(d.location.hash)     }      function Ra(a) {         J *= Math.pow(.9, a.wheelDelta / -120 || a.detail || 0);         console.log(\"J: \" + J);         //UPDATE         0.07 > J && (J = 0.07);         J > 4 / h && (J = 4 / h)     }      function qb() {         if (.4 > h) X = null;         else {             for (var a = Number.POSITIVE_INFINITY, b = Number.POSITIVE_INFINITY, c = Number.NEGATIVE_INFINITY, l = Number.NEGATIVE_INFINITY, d = 0, p = 0; p < v.length; p++) {                 var g = v[p];                 !g.N() || g.R || 20 >= g.size * h || (d = Math.max(g.size, d), a = Math.min(g.x, a), b = Math.min(g.y, b), c = Math.max(g.x, c), l = Math.max(g.y, l))             }             X = rb.ka({                 ca: a - 10,                 da: b - 10,                 oa: c + 10,                 pa: l + 10,                 ma: 2,                 na: 4             });             for (p = 0; p < v.length; p++)                 if (g = v[p],                     g.N() && !(20 >= g.size * h))                     for (a = 0; a < g.a.length; ++a) b = g.a[a].x, c = g.a[a].y, b < s - m / 2 / h || c < t - r / 2 / h || b > s + m / 2 / h || c > t + r / 2 / h || X.m(g.a[a])         }     }      function Aa() {         //UPDATE         if (toggle || window.botList[botIndex].name == \"Human\") {             setPoint(((fa - m / 2) / h + s), ((ga - r / 2) / h + t));         }     }      function Pa() {         null == ka && (ka = {}, e(\"#region\").children().each(function() {             var a = e(this),                 b = a.val();             b && (ka[b] = a.text())         }));         e.get(ap + \"info\", function(a) {                 var b = {},                     c;                 for (c in a.regions) {                     var l = c.split(\":\")[0];                     b[l] = b[l] || 0;                     b[l] += a.regions[c].numPlayers                 }                 for (c in b) e('#region option[value=\"' + c + '\"]').text(ka[c] + \" (\" + b[c] + \" players)\")             },             \"json\")     }      function Xa() {         e(\"#adsBottom\").hide();         e(\"#overlays\").hide();         W = !1;         Va();         d.googletag && d.googletag.pubads && d.googletag.pubads().clear(d.aa)     }      function ha(a) {         a && a != y && (e(\"#region\").val() != a && e(\"#region\").val(a), y = d.localStorage.location = a, e(\".region-message\").hide(), e(\".region-message.\" + a).show(), e(\".btn-needs-server\").prop(\"disabled\", !1), ya && I())     }      function Sa(a) {         W || (K = null, sb(), a && (x = 1), W = !0, e(\"#overlays\").fadeIn(a ? 200 : 3E3))     }      function Y(a) {         e(\"#helloContainer\").attr(\"data-gamemode\", a);         P = a;         e(\"#gamemode\").val(a)     }      function Va() {         e(\"#region\").val() ? d.localStorage.location = e(\"#region\").val() : d.localStorage.location && e(\"#region\").val(d.localStorage.location);         e(\"#region\").val() ? e(\"#locationKnown\").append(e(\"#region\")) : e(\"#locationUnknown\").append(e(\"#region\"));     }      function sb() {         la && (la = !1, setTimeout(function() {             la = !0                 //UPDATE         }, 6E4 * Ya))     }      function Z(a) {         return d.i18n[a] || d.i18n_dict.en[a] || a     }      function Za() {         var a = ++Ba;         console.log(\"Find \" + y + P);         e.ajax(ap + \"findServer\", {             error: function() {                 setTimeout(Za, 1E3)             },             success: function(b) {                 a == Ba && (b.alert && alert(b.alert), Ca(\"ws://\" + b.ip, b.token))             },             dataType: \"json\",             method: \"POST\",             cache: !1,             crossDomain: !0,             data: (y + P || \"?\") + \"\\n154669603\"         })     }      function I() {         ya && y && (e(\"#connecting\").show(), Za())     }      function Ca(a, b) {         if (q) {             q.onopen = null;             q.onmessage = null;             q.onclose = null;             try {                 q.close()             } catch (c) {}             q = null         }         Da.ip && (a = \"ws://\" + Da.ip);         if (null != L) {             var l = L;             L = function() {                 l(b)             }         }         if (tb) {             var d = a.split(\":\");             a = d[0] + \"s://ip-\" + d[1].replace(/\\./g, \"-\").replace(/\\//g, \"\") + \".tech.agar.io:\" + +d[2]         }         M = [];         k = [];         E = {};         v = [];         Q = [];         F = [];         z = A = null;         R = 0;         bo = !1;         console.log(\"Connecting to \" + a);         //UPDATE         serverIP = a;         q = new WebSocket(a);         q.binaryType = \"arraybuffer\";         q.onopen = function() {             var a;             console.log(\"socket open\");             a = N(5);             a.setUint8(0, 254);             a.setUint32(1, 5, !0);             O(a);             a = N(5);             a.setUint8(0, 255);             a.setUint32(1, 154669603, !0);             O(a);             a = N(1 + b.length);             a.setUint8(0, 80);             for (var c = 0; c < b.length; ++c) a.setUint8(c + 1, b.charCodeAt(c));             O(a);             $a()         };         q.onmessage = ub;         q.onclose = vb;         q.onerror = function() {             console.log(\"socket error\")         }     }      function N(a) {         return new DataView(new ArrayBuffer(a))     }      function O(a) {         q.send(a.buffer)     }      function vb() {         bo && (ma = 500);         console.log(\"socket close\");         setTimeout(I, ma);         ma *= 2     }      function ub(a) {         wb(new DataView(a.data))     }      function wb(a) {         function b() {             for (var b = \"\";;) {                 var d = a.getUint16(c, !0);                 c += 2;                 if (0 == d) break;                 b += String.fromCharCode(d)             }             return b         }         var c = 0;         240 == a.getUint8(c) && (c += 5);         switch (a.getUint8(c++)) {             case 16:                 xb(a, c);                 break;             case 17:                 aa = a.getFloat32(c, !0);                 c += 4;                 ba = a.getFloat32(c, !0);                 c += 4;                 ca = a.getFloat32(c, !0);                 c += 4;                 break;             case 20:                 k = [];                 M = [];                 break;             case 21:                 Ea = a.getInt16(c, !0);                 c += 2;                 Fa = a.getInt16(c, !0);                 c += 2;                 Ga || (Ga = !0, na = Ea, oa = Fa);                 break;             case 32:                 M.push(a.getUint32(c, !0));                 c += 4;                 break;             case 49:                 if (null != A) break;                 var l = a.getUint32(c, !0),                     c = c + 4;                 F = [];                 for (var d = 0; d < l; ++d) {                     var p = a.getUint32(c, !0),                         c = c + 4;                     F.push({                         id: p,                         name: b()                     })                 }                 ab();                 break;             case 50:                 A = [];                 l = a.getUint32(c, !0);                 c += 4;                 for (d = 0; d < l; ++d) A.push(a.getFloat32(c, !0)), c += 4;                 ab();                 break;             case 64:                 pa = a.getFloat64(c, !0);                 c += 8;                 qa = a.getFloat64(c, !0);                 c += 8;                 ra = a.getFloat64(c, !0);                 c += 8;                 sa = a.getFloat64(c, !0);                 c += 8;                 aa = (ra + pa) / 2;                 ba = (sa + qa) / 2;                 ca = 1;                 0 == k.length && (s = aa, t = ba, h = ca);                 break;             case 81:                 var g = a.getUint32(c, !0),                     c = c + 4,                     e = a.getUint32(c, !0),                     c = c + 4,                     f = a.getUint32(c, !0),                     c = c + 4;                 setTimeout(function() {                     S({                         e: g,                         f: e,                         d: f                     })                 }, 1200)         }     }      function xb(a, b) {         bb = C = Date.now();         bo || (bo = !0, e(\"#connecting\").hide(), cb(), L && (L(), L = null));         var c = Math.random();         Ha = !1;         var d = a.getUint16(b, !0);         b += 2;         for (var u = 0; u < d; ++u) {             var p = E[a.getUint32(b, !0)],                 g = E[a.getUint32(b + 4, !0)];             b += 8;             p && g && (g.X(), g.s = g.x, g.t = g.y, g.r = g.size, g.J = p.x, g.K = p.y, g.q = g.size, g.Q =                 C)         }         for (u = 0;;) {             d = a.getUint32(b, !0);             b += 4;             if (0 == d) break;             ++u;             var f, p = a.getInt16(b, !0);             b += 4;             g = a.getInt16(b, !0);             b += 4;             f = a.getInt16(b, !0);             b += 2;             for (var h = a.getUint8(b++), w = a.getUint8(b++), m = a.getUint8(b++), h = (h << 16 | w << 8 | m).toString(16); 6 > h.length;) h = \"0\" + h;             var h = \"#\" + h,                 w = a.getUint8(b++),                 m = !!(w & 1),                 r = !!(w & 16);             w & 2 && (b += 4);             w & 4 && (b += 8);             w & 8 && (b += 16);             for (var q, n = \"\";;) {                 q = a.getUint16(b, !0);                 b += 2;                 if (0 == q) break;                 n += String.fromCharCode(q)             }             q = n;             n = null;             E.hasOwnProperty(d) ? (n = E[d], n.P(), n.s = n.x, n.t = n.y, n.r = n.size, n.color = h) :                 (n = new da(d, p, g, f, h, q), v.push(n), E[d] = n, n.ua = p, n.va = g);             n.h = m;             n.n = r;             n.J = p;             n.K = g;             n.q = f;             n.sa = c;             n.Q = C;             n.ba = w;             q && n.B(q); - 1 != M.indexOf(d) && -1 == k.indexOf(n) && (document.getElementById(\"overlays\").style.display = \"none\", k.push(n), n.birth = getLastUpdate(), n.birthMass = (n.size * n.size / 100), 1 == k.length && (s = n.x, t = n.y, db()))              //UPDATE             interNodes[d] = window.getCells()[d];         }          //UPDATE         Object.keys(interNodes).forEach(function(element, index) {             //console.log(\"start: \" + interNodes[element].updateTime + \" current: \" + D + \" life: \" + (D - interNodes[element].updateTime));             var isRemoved = !window.getCells().hasOwnProperty(element);              //console.log(\"Time not updated: \" + (window.getLastUpdate() - interNodes[element].getUptimeTime()));             if (isRemoved && (window.getLastUpdate() - interNodes[element].getUptimeTime()) > 3000) {                 delete interNodes[element];             } else {                 if (isRemoved &&                     interNodes[element].x > (getX() - (1920 / 2) / getZoomlessRatio()) &&                     interNodes[element].x < (getX() + (1920 / 2) / getZoomlessRatio()) &&                     interNodes[element].y > getY() - (1080 / 2) / getZoomlessRatio() &&                     interNodes[element].y < getY() + (1080 / 2) / getZoomlessRatio()) {                      delete interNodes[element];                 }             }         });          c = a.getUint32(b, !0);         b += 4;         for (u = 0; u < c; u++) d = a.getUint32(b, !0), b += 4, n = E[d], null != n && n.X();         //UPDATE         //Ha && 0 == k.length && Sa(!1)     }      //UPDATE     function computeDistance(x1, y1, x2, y2) {         var xdis = x1 - x2; // <--- FAKE AmS OF COURSE!         var ydis = y1 - y2;         var distance = Math.sqrt(xdis * xdis + ydis * ydis);          return distance;     }      /**      * Some horse shit of some sort.      * @return Horse Shit      */     function screenDistance() {         return Math.min(computeDistance(getOffsetX(), getOffsetY(), screenToGameX(getWidth()), getOffsetY()), computeDistance(getOffsetX(), getOffsetY(), getOffsetX(), screenToGameY(getHeight())));     }      window.verticalDistance = function() {         return computeDistance(screenToGameX(0), screenToGameY(0), screenToGameX(getWidth()), screenToGameY(getHeight()));     }      /**      * A conversion from the screen's horizontal coordinate system      * to the game's horizontal coordinate system.      * @param x in the screen's coordinate system      * @return x in the game's coordinate system      */     window.screenToGameX = function(x) {         return (x - getWidth() / 2) / getRatio() + getX();     }      /**      * A conversion from the screen's vertical coordinate system      * to the game's vertical coordinate system.      * @param y in the screen's coordinate system      * @return y in the game's coordinate system      */     window.screenToGameY = function(y) {         return (y - getHeight() / 2) / getRatio() + getY();     }      window.drawPoint = function(x_1, y_1, drawColor, text) {         if (!toggleDraw) {             dPoints.push([x_1, y_1, drawColor]);             dText.push(text);         }     }      window.drawArc = function(x_1, y_1, x_2, y_2, x_3, y_3, drawColor) {         if (!toggleDraw) {             var radius = computeDistance(x_1, y_1, x_3, y_3);             dArc.push([x_1, y_1, x_2, y_2, x_3, y_3, radius, drawColor]);         }     }      window.drawLine = function(x_1, y_1, x_2, y_2, drawColor) {         if (!toggleDraw) {             lines.push([x_1, y_1, x_2, y_2, drawColor]);         }     }      window.drawCircle = function(x_1, y_1, radius, drawColor) {         if (!toggleDraw) {             circles.push([x_1, y_1, radius, drawColor]);         }     }      function V() {          //UPDATE         if (firstStart) {             Sa(false);         }                  if (getPlayer().length == 0 && !reviving && ~~(getCurrentScore() / 100) > 0) {             console.log(\"Dead: \" + ~~(getCurrentScore() / 100));             apos('send', 'pageview');         }          if (getPlayer().length == 0 && !firstStart) {             console.log(\"Revive\");             setNick(originalName);             reviving = true;         } else if (getPlayer().length > 0 && reviving) {             reviving = false;             console.log(\"Done Reviving!\");         }          if (T()) {             var a = fa - m / 2;             var b = ga - r / 2;             64 > a * a + b * b || .01 > Math.abs(eb - ia) &&                 .01 > Math.abs(fb - ja) || (eb = ia, fb = ja, a = N(13), a.setUint8(0, 16), a.setInt32(1, ia, !0), a.setInt32(5, ja, !0), a.setUint32(9, 0, !0), O(a))         }     }      function cb() {         if (T() && bo && null != K) {             var a = N(1 + 2 * K.length);             a.setUint8(0, 0);             for (var b = 0; b < K.length; ++b) a.setUint16(1 + 2 * b, K.charCodeAt(b), !0);             O(a)         }     }      function T() {         return null != q && q.readyState == q.OPEN     }      window.opCode = function(a) {         console.log(\"Sending op code.\");         H(parseInt(a));     }      function H(a) {         if (T()) {             var b = N(1);             b.setUint8(0, a);             O(b)         }     }      function $a() {         if (T() && null != B) {             var a = N(1 + B.length);             a.setUint8(0, 81);             for (var b = 0; b < B.length; ++b) a.setUint8(b + 1, B.charCodeAt(b));             O(a)         }     }      function Ta() {         m = d.innerWidth;         r = d.innerHeight;         za.width = G.width = m;         za.height = G.height = r;         var a = e(\"#helloContainer\");         a.css(\"transform\", \"none\");         var b = a.height(),             c = d.innerHeight;         b > c / 1.1 ? a.css(\"transform\", \"translate(-50%, -50%) scale(\" + c / b / 1.1 + \")\") : a.css(\"transform\", \"translate(-50%, -50%)\");         gb()     }      function hb() {         var a;         a = Math.max(r / 1080, m / 1920);         return a *= J     }      //UPDATE     function hb2() {         var a;         a = Math.max(r / 1080, m / 1920);         return a;     }      function yb() {         if (0 != k.length) {             for (var a = 0, b = 0; b < k.length; b++) a += k[b].size;             //UPDATE             var a2 = Math.pow(Math.min(64 / a, 1), .4) * hb2();             a = Math.pow(Math.min(64 / a, 1), .4) * hb();             h = (9 * h + a) / 10;             //UPDATE             h2 = (9 * h2 + a2) / 10;         }     }      function gb() {         //UPDATE         dPoints = [];         circles = [];         dArc = [];         dText = [];         lines = [];           var a, b = Date.now();         ++zb;         C = b;         if (0 < k.length) {             yb();             for (var c = a = 0, d = 0; d < k.length; d++) k[d].P(), a += k[d].x / k.length, c += k[d].y / k.length;             aa = a;             ba = c;             ca = h;             s = (s + a) / 2;             t = (t + c) / 2;             //UPDATE         } else s = (29 * s + aa) / 30, t = (29 * t + ba) / 30, h = (9 * h + ca * hb()) / 10, h2 = (9 * h2 + ca * hb2()) / 10;         qb();         Aa();         Ia || f.clearRect(0, 0, m, r);         Ia ? (f.fillStyle = ta ? \"#111111\" : \"#F2FBFF\", f.globalAlpha = .05, f.fillRect(0, 0, m, r), f.globalAlpha = 1) : Ab();         v.sort(function(a, b) {             return a.size == b.size ? a.id - b.id : a.size - b.size         });         f.save();         f.translate(m / 2, r / 2);         f.scale(h, h);         f.translate(-s, -t);         //UPDATE         f.save();         f.beginPath();         f.lineWidth = 5;         f.strokeStyle = (getDarkBool() ? '#F2FBFF' : '#111111');         f.moveTo(getMapStartX(), getMapStartY());         f.lineTo(getMapStartX(), getMapEndY());         f.stroke();         f.moveTo(getMapStartX(), getMapStartY());         f.lineTo(getMapEndX(), getMapStartY());         f.stroke();         f.moveTo(getMapEndX(), getMapStartY());         f.lineTo(getMapEndX(), getMapEndY());         f.stroke();         f.moveTo(getMapStartX(), getMapEndY());         f.lineTo(getMapEndX(), getMapEndY());         f.stroke();         f.restore();          for (d = 0; d < v.length; d++) v[d].w(f);         for (d = 0; d < Q.length; d++) Q[d].w(f);         //UPDATE         if (getPlayer().length > 0) {             var moveLoc = window.botList[botIndex].mainLoop();             if (!toggle) {                 setPoint(moveLoc[0], moveLoc[1]);             }         }         customRender(f);         if (Ga) {             na = (3 * na + Ea) / 4;             oa = (3 * oa + Fa) / 4;             f.save();             f.strokeStyle = \"#FFAAAA\";             f.lineWidth = 10;             f.lineCap = \"round\";             f.lineJoin = \"round\";             f.globalAlpha = .5;             f.beginPath();             for (d = 0; d < k.length; d++) f.moveTo(k[d].x, k[d].y), f.lineTo(na, oa);             f.stroke();             f.restore();         }         f.restore();         z && z.width && f.drawImage(z, m - z.width - 10, 10);         R = Math.max(R, Bb());          //UPDATE          var currentDate = new Date();          var nbSeconds = 0;         if (getPlayer().length > 0) {             //nbSeconds = currentDate.getSeconds() + currentDate.getMinutes() * 60 + currentDate.getHours() * 3600 - lifeTimer.getSeconds() - lifeTimer.getMinutes() * 60 - lifeTimer.getHours() * 3600;             nbSeconds = (currentDate.getTime() - lifeTimer.getTime()) / 1000;         }          bestTime = Math.max(nbSeconds, bestTime);          var displayText = 'Score: ' + ~~(R / 100) + \" Current Time: \" + nbSeconds + \" seconds.\";          0 != R && (null == ua && (ua = new va(24, \"#FFFFFF\")), ua.C(displayText), c = ua.L(), a = c.width, f.globalAlpha = .2, f.fillStyle = \"#000000\", f.fillRect(10, r - 10 - 24 - 10, a + 10, 34), f.globalAlpha = 1, f.drawImage(c, 15, r -             10 - 24 - 5));         Cb();         b = Date.now() - b;         b > 1E3 / 60 ? D -= .01 : b < 1E3 / 65 && (D += .01);.4 > D && (D = .4);         1 < D && (D = 1);         b = C - ib;         !T() || W ? (x += b / 2E3, 1 < x && (x = 1)) : (x -= b / 300, 0 > x && (x = 0));         0 < x && (f.fillStyle = \"#000000\", f.globalAlpha = .5 * x, f.fillRect(0, 0, m, r), f.globalAlpha = 1);         ib = C          drawStats(f);     }      //UPDATE     function customRender(d) {         d.save();         for (var i = 0; i < lines.length; i++) {             d.beginPath();              d.lineWidth = 5;              if (lines[i][4] == 0) {                 d.strokeStyle = \"#FF0000\";             } else if (lines[i][4] == 1) {                 d.strokeStyle = \"#00FF00\";             } else if (lines[i][4] == 2) {                 d.strokeStyle = \"#0000FF\";             } else if (lines[i][4] == 3) {                 d.strokeStyle = \"#FF8000\";             } else if (lines[i][4] == 4) {                 d.strokeStyle = \"#8A2BE2\";             } else if (lines[i][4] == 5) {                 d.strokeStyle = \"#FF69B4\";             } else if (lines[i][4] == 6) {                 d.strokeStyle = \"#008080\";             } else if (lines[i][4] == 7) {                 d.strokeStyle = (getDarkBool() ? '#F2FBFF' : '#111111');             } else {                 d.strokeStyle = \"#000000\";             }              d.moveTo(lines[i][0], lines[i][1]);             d.lineTo(lines[i][2], lines[i][3]);              d.stroke();         }         d.restore();         d.save();         for (var i = 0; i < circles.length; i++) {             if (circles[i][3] == 0) {                 d.strokeStyle = \"#FF0000\";             } else if (circles[i][3] == 1) {                 d.strokeStyle = \"#00FF00\";             } else if (circles[i][3] == 2) {                 d.strokeStyle = \"#0000FF\";             } else if (circles[i][3] == 3) {                 d.strokeStyle = \"#FF8000\";             } else if (circles[i][3] == 4) {                 d.strokeStyle = \"#8A2BE2\";             } else if (circles[i][3] == 5) {                 d.strokeStyle = \"#FF69B4\";             } else if (circles[i][3] == 6) {                 d.strokeStyle = \"#008080\";             } else if (circles[i][3] == 7) {                 d.strokeStyle = (getDarkBool() ? '#F2FBFF' : '#111111');             } else {                 d.strokeStyle = \"#000000\";             }             d.beginPath();              d.lineWidth = 10;             //d.setLineDash([5]);             d.globalAlpha = 0.3;              d.arc(circles[i][0], circles[i][1], circles[i][2], 0, 2 * Math.PI, false);              d.stroke();         }         d.restore();         d.save();         for (var i = 0; i < dArc.length; i++) {             if (dArc[i][7] == 0) {                 d.strokeStyle = \"#FF0000\";             } else if (dArc[i][7] == 1) {                 d.strokeStyle = \"#00FF00\";             } else if (dArc[i][7] == 2) {                 d.strokeStyle = \"#0000FF\";             } else if (dArc[i][7] == 3) {                 d.strokeStyle = \"#FF8000\";             } else if (dArc[i][7] == 4) {                 d.strokeStyle = \"#8A2BE2\";             } else if (dArc[i][7] == 5) {                 d.strokeStyle = \"#FF69B4\";             } else if (dArc[i][7] == 6) {                 d.strokeStyle = \"#008080\";             } else if (dArc[i][7] == 7) {                 d.strokeStyle = (getDarkBool() ? '#F2FBFF' : '#111111');             } else {                 d.strokeStyle = \"#000000\";             }              d.beginPath();              d.lineWidth = 5;              var ang1 = Math.atan2(dArc[i][1] - dArc[i][5], dArc[i][0] - dArc[i][4]);             var ang2 = Math.atan2(dArc[i][3] - dArc[i][5], dArc[i][2] - dArc[i][4]);              d.arc(dArc[i][4], dArc[i][5], dArc[i][6], ang1, ang2, false);              d.stroke();         }         d.restore();         d.save();         for (var i = 0; i < dPoints.length; i++) {             if (dText[i] == \"\") {                 var radius = 10;                  d.beginPath();                 d.arc(dPoints[i][0], dPoints[i][1], radius, 0, 2 * Math.PI, false);                  if (dPoints[i][2] == 0) {                     d.fillStyle = \"black\";                 } else if (dPoints[i][2] == 1) {                     d.fillStyle = \"yellow\";                 } else if (dPoints[i][2] == 2) {                     d.fillStyle = \"blue\";                 } else if (dPoints[i][2] == 3) {                     d.fillStyle = \"red\";                 } else if (dPoints[i][2] == 4) {                     d.fillStyle = \"#008080\";                 } else if (dPoints[i][2] == 5) {                     d.fillStyle = \"#FF69B4\";                 } else {                     d.fillStyle = \"#000000\";                 }                  d.fill();                 d.lineWidth = 2;                 d.strokeStyle = '#003300';                 d.stroke();             } else {                 var text = new va(18, (getDarkBool() ? '#F2FBFF' : '#111111'), true, (getDarkBool() ? '#111111' : '#F2FBFF'));                  text.C(dText[i]);                 var textRender = text.L();                 d.drawImage(textRender, dPoints[i][0] - (textRender.width / 2), dPoints[i][1] - (textRender.height / 2));             }          }         d.restore();     }      function drawStats(d) {         d.save()          sessionScore = Math.max(getCurrentScore(), sessionScore);          var botString = window.botList[botIndex].displayText();          var debugStrings = [];         debugStrings.push(\"Bot: \" + window.botList[botIndex].name);         debugStrings.push(\"Launcher: AposLauncher \" + aposLauncherVersion);         debugStrings.push(\"T - Bot: \" + (!toggle ? \"On\" : \"Off\"));         debugStrings.push(\"R - Lines: \" + (!toggleDraw ? \"On\" : \"Off\"));          for (var i = 0; i < botString.length; i++) {             debugStrings.push(botString[i]);         }          debugStrings.push(\"\");         debugStrings.push(\"Best Score: \" + ~~(sessionScore / 100));         debugStrings.push(\"Best Time: \" + bestTime + \" seconds\");         debugStrings.push(\"\");         debugStrings.push(serverIP);          if (getPlayer().length > 0) {             var offsetX = -getMapStartX();             var offsetY = -getMapStartY();             debugStrings.push(\"Location: \" + Math.floor(getPlayer()[0].x + offsetX) + \", \" + Math.floor(getPlayer()[0].y + offsetY));         }          var offsetValue = 20;         var text = new va(18, (getDarkBool() ? '#F2FBFF' : '#111111'));          for (var i = 0; i < debugStrings.length; i++) {             text.C(debugStrings[i]);             var textRender = text.L();             d.drawImage(textRender, 20, offsetValue);             offsetValue += textRender.height;         }          if (message.length > 0) {             var mRender = [];             var mWidth = 0;             var mHeight = 0;              for (var i = 0; i < message.length; i++) {                 var mText = new va(28, '#FF0000', true, '#000000');                 mText.C(message[i]);                 mRender.push(mText.L());                  if (mRender[i].width > mWidth) {                     mWidth = mRender[i].width;                 }                 mHeight += mRender[i].height;             }              var mX = getWidth() / 2 - mWidth / 2;             var mY = 20;              d.globalAlpha = 0.4;             d.fillStyle = '#000000';             d.fillRect(mX - 10, mY - 10, mWidth + 20, mHeight + 20);             d.globalAlpha = 1;              var mOffset = mY;             for (var i = 0; i < mRender.length; i++) {                 d.drawImage(mRender[i], getWidth() / 2 - mRender[i].width / 2, mOffset);                 mOffset += mRender[i].height;             }         }          d.restore();     }      function Ab() {         f.fillStyle = ta ? \"#111111\" : \"#F2FBFF\";         f.fillRect(0, 0, m, r);         f.save();         f.strokeStyle = ta ? \"#AAAAAA\" : \"#000000\";         f.globalAlpha = .2 * h;         for (var a = m / h, b = r / h, c = (a / 2 - s) % 50; c < a; c += 50) f.beginPath(), f.moveTo(c * h - .5, 0), f.lineTo(c * h - .5, b * h), f.stroke();         for (c = (b / 2 - t) % 50; c < b; c += 50) f.beginPath(), f.moveTo(0, c * h - .5), f.lineTo(a * h, c * h - .5), f.stroke();         f.restore()     }      function Cb() {         if (Qa && Ja.width) {             var a = m / 5;             f.drawImage(Ja, 5, 5, a, a)         }     }      function Bb() {         for (var a = 0, b = 0; b < k.length; b++) a += k[b].q * k[b].q;         return a     }      function ab() {         z = null;         if (null != A || 0 != F.length)             if (null != A || wa) {                 z = document.createElement(\"canvas\");                 var a = z.getContext(\"2d\"),                     b = 60,                     b = null == A ? b + 24 * F.length : b + 180,                     c = Math.min(200, .3 * m) / 200;                 z.width = 200 * c;                 z.height = b * c;                 a.scale(c, c);                 a.globalAlpha = .4;                 a.fillStyle = \"#000000\";                 a.fillRect(0, 0, 200, b);                 a.globalAlpha =                     1;                 a.fillStyle = \"#FFFFFF\";                 c = null;                 c = Z(\"leaderboard\");                 a.font = \"30px Ubuntu\";                 a.fillText(c, 100 - a.measureText(c).width / 2, 40);                 if (null == A)                     for (a.font = \"20px Ubuntu\", b = 0; b < F.length; ++b) c = F[b].name || Z(\"unnamed_cell\"), wa || (c = Z(\"unnamed_cell\")), -1 != M.indexOf(F[b].id) ? (k[0].name && (c = k[0].name), a.fillStyle = \"#FFAAAA\") : a.fillStyle = \"#FFFFFF\", c = b + 1 + \". \" + c, a.fillText(c, 100 - a.measureText(c).width / 2, 70 + 24 * b);                 else                     for (b = c = 0; b < A.length; ++b) {                         var d = c + A[b] * Math.PI * 2;                         a.fillStyle = Db[b + 1];                         a.beginPath();                         a.moveTo(100, 140);                         a.arc(100,                             140, 80, c, d, !1);                         a.fill();                         c = d                     }             }     }      function Ka(a, b, c, d, e) {         this.V = a;         this.x = b;         this.y = c;         this.i = d;         this.b = e     }      function da(a, b, c, d, e, p) {         this.id = a;         this.s = this.x = b;         this.t = this.y = c;         this.r = this.size = d;         this.color = e;         this.a = [];         this.W();         this.B(p)     }      function va(a, b, c, d) {         a && (this.u = a);         b && (this.S = b);         this.U = !!c;         d && (this.v = d)     }      function S(a, b) {         var c = \"1\" == e(\"#helloContainer\").attr(\"data-has-account-data\");         e(\"#helloContainer\").attr(\"data-has-account-data\", \"1\");         if (null == b && d.localStorage.loginCache) {             var l = JSON.parse(d.localStorage.loginCache);             l.f = a.f;             l.d = a.d;             l.e = a.e;             d.localStorage.loginCache = JSON.stringify(l)         }         if (c) {             var u = +e(\".agario-exp-bar .progress-bar-text\").first().text().split(\"/\")[0],                 c = +e(\".agario-exp-bar .progress-bar-text\").first().text().split(\"/\")[1].split(\" \")[0],                 l = e(\".agario-profile-panel .progress-bar-star\").first().text();             if (l != a.e) S({                 f: c,                 d: c,                 e: l             }, function() {                 e(\".agario-profile-panel .progress-bar-star\").text(a.e);                 e(\".agario-exp-bar .progress-bar\").css(\"width\", \"100%\");                 e(\".progress-bar-star\").addClass(\"animated tada\").one(\"webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend\",                     function() {                         e(\".progress-bar-star\").removeClass(\"animated tada\")                     });                 setTimeout(function() {                     e(\".agario-exp-bar .progress-bar-text\").text(a.d + \"/\" + a.d + \" XP\");                     S({                         f: 0,                         d: a.d,                         e: a.e                     }, function() {                         S(a, b)                     })                 }, 1E3)             });             else {                 var p = Date.now(),                     g = function() {                         var c;                         c = (Date.now() - p) / 1E3;                         c = 0 > c ? 0 : 1 < c ? 1 : c;                         c = c * c * (3 - 2 * c);                         e(\".agario-exp-bar .progress-bar-text\").text(~~(u + (a.f - u) * c) + \"/\" + a.d + \" XP\");                         e(\".agario-exp-bar .progress-bar\").css(\"width\", (88 * (u + (a.f - u) * c) / a.d).toFixed(2) + \"%\");                         1 > c ? d.requestAnimationFrame(g) : b && b()                     };                 d.requestAnimationFrame(g)              }         } else e(\".agario-profile-panel .progress-bar-star\").text(a.e),             e(\".agario-exp-bar .progress-bar-text\").text(a.f + \"/\" + a.d + \" XP\"), e(\".agario-exp-bar .progress-bar\").css(\"width\", (88 * a.f / a.d).toFixed(2) + \"%\"), b && b()      }      function jb(a) {         \"string\" == typeof a && (a = JSON.parse(a));         Date.now() + 18E5 > a.ja ? e(\"#helloContainer\").attr(\"data-logged-in\", \"0\") : (d.localStorage.loginCache = JSON.stringify(a), B = a.fa, e(\".agario-profile-name\").text(a.name), $a(), S({             f: a.f,             d: a.d,             e: a.e         }), e(\"#helloContainer\").attr(\"data-logged-in\", \"1\"))     }      function Eb(a) {         a = a.split(\"\\n\");         jb({             name: a[0],             ta: a[1],             fa: a[2],             ja: 1E3 *                 +a[3],             e: +a[4],             f: +a[5],             d: +a[6]         });         console.log(\"Hello Facebook?\");     }      function La(a) {         if (\"connected\" == a.status) {             var b = a.authResponse.accessToken;             d.FB.api(\"/me/picture?width=180&height=180\", function(a) {                 d.localStorage.fbPictureCache = a.data.url;                 e(\".agario-profile-picture\").attr(\"src\", a.data.url)             });             e(\"#helloContainer\").attr(\"data-logged-in\", \"1\");             null != B ? e.ajax(ap + \"checkToken\", {                 error: function() {                     console.log(\"Facebook Fail!\");                     B = null;                     La(a)                 },                 success: function(a) {                     a = a.split(\"\\n\");                     S({                         e: +a[0],                         f: +a[1],                         d: +a[2]                     });                     console.log(\"Facebook connected!\");                 },                 dataType: \"text\",                 method: \"POST\",                 cache: !1,                 crossDomain: !0,                 data: B             }) : e.ajax(ap + \"facebookLogin\", {                 error: function() {                     console.log(\"You have a Facebook problem!\");                     B = null;                     e(\"#helloContainer\").attr(\"data-logged-in\", \"0\")                 },                 success: Eb,                 dataType: \"text\",                 method: \"POST\",                 cache: !1,                 crossDomain: !0,                 data: b             })         }     }      function Wa(a) {         Y(\":party\");         e(\"#helloContainer\").attr(\"data-party-state\", \"4\");         a = decodeURIComponent(a).replace(/.*#/gim, \"\");         Ma(\"#\" + d.encodeURIComponent(a));         e.ajax(ap + \"getToken\", {             error: function() {                 e(\"#helloContainer\").attr(\"data-party-state\", \"6\")             },             success: function(b) {                 b = b.split(\"\\n\");                 e(\".partyToken\").val(\"agar.io/#\" +                     d.encodeURIComponent(a));                 e(\"#helloContainer\").attr(\"data-party-state\", \"5\");                 Y(\":party\");                 Ca(\"ws://\" + b[0], a)             },             dataType: \"text\",             method: \"POST\",             cache: !1,             crossDomain: !0,             data: a         })     }      function Ma(a) {         d.history && d.history.replaceState && d.history.replaceState({}, d.document.title, a)     }     if (!d.agarioNoInit) {         var Na = d.location.protocol,             tb = \"https:\" == Na,             ap = Na + \"//m.agar.io/\",             xa = d.navigator.userAgent;         if (-1 != xa.indexOf(\"Android\")) d.ga && d.ga(\"send\", \"event\", \"MobileRedirect\", \"PlayStore\"), setTimeout(function() {                 d.location.href = \"market://details?id=com.miniclip.agar.io\"             },             1E3);         else if (-1 != xa.indexOf(\"iPhone\") || -1 != xa.indexOf(\"iPad\") || -1 != xa.indexOf(\"iPod\")) d.ga && d.ga(\"send\", \"event\", \"MobileRedirect\", \"AppStore\"), setTimeout(function() {             d.location.href = \"https://itunes.apple.com/app/agar.io/id995999703\"         }, 1E3);         else {             var za, f, G, m, r, X = null,                  //UPDATE                 toggle = false,                 toggleDraw = false,                 shootTime = 0,                 splitTime = 0,                 shootCooldown = 100,                 splitCooldown = 100,                 tempPoint = [0, 0, 1],                 dPoints = [],                 circles = [],                 dArc = [],                 dText = [],                 lines = [],                 names = [\"fb.com/nifhnif\"],                 firstStart = true;                 originalName = names[Math.floor(Math.random() * names.length)],                 sessionScore = 0,                 serverIP = \"\",                 interNodes = [],                 lifeTimer = new Date(),                 bestTime = 0,                 botIndex = 0,                 reviving = false,                 message = [],                  q = null,                 s = 0,                 t = 0,                 M = [],                 k = [],                 E = {},                 v = [],                 Q = [],                 F = [],                 fa = 0,                 ga = 0,                  //UPDATE                 ia = -1,                 ja = -1,                  zb = 0,                 C = 0,                 ib = 0,                 K = null,                 pa = 0,                 qa = 0,                 ra = 1E4,                 sa = 1E4,                 h = 1,                 h2 = 1,                 y = null,                 kb = !0,                 wa = !0,                 Oa = !1,                 Ha = !1,                 R = 0,                 ta = !1,                 lb = !1,                 aa = s = ~~((pa + ra) / 2),                 ba = t = ~~((qa + sa) / 2),                 ca = 1,                 P = \"\",                 A = null,                 ya = !1,                 Ga = !1,                 Ea = 0,                 Fa =                 0,                 na = 0,                 oa = 0,                 mb = 0,                 Db = [\"#333333\", \"#FF3333\", \"#33FF33\", \"#3333FF\"],                 Ia = !1,                 bo = !1,                 bb = 0,                 B = null,                 J = 1,                 x = 1,                 W = !0,                 Ba = 0,                 Da = {};             (function() {                 var a = d.location.search;                 \"?\" == a.charAt(0) && (a = a.slice(1));                 for (var a = a.split(\"&\"), b = 0; b < a.length; b++) {                     var c = a[b].split(\"=\");                     Da[c[0]] = c[1]                 }             })();             var Qa = \"ontouchstart\" in d && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(d.navigator.userAgent),                 Ja = new Image;             Ja.src = \"img/split.png\";             var nb = document.createElement(\"canvas\");             if (\"undefined\" == typeof console || \"undefined\" ==                 typeof DataView || \"undefined\" == typeof WebSocket || null == nb || null == nb.getContext || null == d.localStorage) alert(\"You browser does not support this game, we recommend you to use Firefox to play this\");             else {                 var ka = null;                 d.setNick = function(a) {                     //UPDATE                     firstStart = false;                     originalName = a;                     if (getPlayer().length == 0) {                         lifeTimer = new Date();                     }                      Xa();                     K = a;                     cb();                     R = 0                 };                 d.setRegion = ha;                 d.setSkins = function(a) {                     kb = a                 };                 d.setNames = function(a) {                     wa = a                 };                 d.setDarkTheme = function(a) {                     ta = a                 };                 d.setColors = function(a) {                     Oa = a                 };                 d.setShowMass = function(a) {                     lb = a                 };                 d.spectate = function() {                     K = null;                     H(1);                     Xa()                 };                 d.setGameMode = function(a) {                     a != P && (\":party\" ==                         P && e(\"#helloContainer\").attr(\"data-party-state\", \"0\"), Y(a), \":party\" != a && I())                 };                 d.setAcid = function(a) {                     Ia = a                 };                 null != d.localStorage && (null == d.localStorage.AB9 && (d.localStorage.AB9 = 0 + ~~(100 * Math.random())), mb = +d.localStorage.AB9, d.ABGroup = mb);                 e.get(Na + \"//gc.agar.io\", function(a) {                     var b = a.split(\" \");                     a = b[0];                     b = b[1] || \"\"; - 1 == [\"UA\"].indexOf(a) && ob.push(\"ussr\");                     ea.hasOwnProperty(a) && (\"string\" == typeof ea[a] ? y || ha(ea[a]) : ea[a].hasOwnProperty(b) && (y || ha(ea[a][b])))                 }, \"text\");                 d.ga && d.ga(\"send\", \"event\", \"User-Agent\", d.navigator.userAgent, {                     nonInteraction: 1                 });                 var la = !1,                     Ya = 0;                 setTimeout(function() {                     la = !0                 }, Math.max(6E4 * Ya, 1E4));                 var ea = {                         AF: \"JP-Tokyo\",                         AX: \"EU-London\",                         AL: \"EU-London\",                         DZ: \"EU-London\",                         AS: \"SG-Singapore\",                         AD: \"EU-London\",                         AO: \"EU-London\",                         AI: \"US-Atlanta\",                         AG: \"US-Atlanta\",                         AR: \"BR-Brazil\",                         AM: \"JP-Tokyo\",                         AW: \"US-Atlanta\",                         AU: \"SG-Singapore\",                         AT: \"EU-London\",                         AZ: \"JP-Tokyo\",                         BS: \"US-Atlanta\",                         BH: \"JP-Tokyo\",                         BD: \"JP-Tokyo\",                         BB: \"US-Atlanta\",                         BY: \"EU-London\",                         BE: \"EU-London\",                         BZ: \"US-Atlanta\",                         BJ: \"EU-London\",                         BM: \"US-Atlanta\",                         BT: \"JP-Tokyo\",                         BO: \"BR-Brazil\",                         BQ: \"US-Atlanta\",                         BA: \"EU-London\",                         BW: \"EU-London\",                         BR: \"BR-Brazil\",                         IO: \"JP-Tokyo\",                         VG: \"US-Atlanta\",                         BN: \"JP-Tokyo\",                         BG: \"EU-London\",                         BF: \"EU-London\",                         BI: \"EU-London\",                         KH: \"JP-Tokyo\",                         CM: \"EU-London\",                         CA: \"US-Atlanta\",                         CV: \"EU-London\",                         KY: \"US-Atlanta\",                         CF: \"EU-London\",                         TD: \"EU-London\",                         CL: \"BR-Brazil\",                         CN: \"CN-China\",                         CX: \"JP-Tokyo\",                         CC: \"JP-Tokyo\",                         CO: \"BR-Brazil\",                         KM: \"EU-London\",                         CD: \"EU-London\",                         CG: \"EU-London\",                         CK: \"SG-Singapore\",                         CR: \"US-Atlanta\",                         CI: \"EU-London\",                         HR: \"EU-London\",                         CU: \"US-Atlanta\",                         CW: \"US-Atlanta\",                         CY: \"JP-Tokyo\",                         CZ: \"EU-London\",                         DK: \"EU-London\",                         DJ: \"EU-London\",                         DM: \"US-Atlanta\",                         DO: \"US-Atlanta\",                         EC: \"BR-Brazil\",                         EG: \"EU-London\",                         SV: \"US-Atlanta\",                         GQ: \"EU-London\",                         ER: \"EU-London\",                         EE: \"EU-London\",                         ET: \"EU-London\",                         FO: \"EU-London\",                         FK: \"BR-Brazil\",                         FJ: \"SG-Singapore\",                         FI: \"EU-London\",                         FR: \"EU-London\",                         GF: \"BR-Brazil\",                         PF: \"SG-Singapore\",                         GA: \"EU-London\",                         GM: \"EU-London\",                         GE: \"JP-Tokyo\",                         DE: \"EU-London\",                         GH: \"EU-London\",                         GI: \"EU-London\",                         GR: \"EU-London\",                         GL: \"US-Atlanta\",                         GD: \"US-Atlanta\",                         GP: \"US-Atlanta\",                         GU: \"SG-Singapore\",                         GT: \"US-Atlanta\",                         GG: \"EU-London\",                         GN: \"EU-London\",                         GW: \"EU-London\",                         GY: \"BR-Brazil\",                         HT: \"US-Atlanta\",                         VA: \"EU-London\",                         HN: \"US-Atlanta\",                         HK: \"JP-Tokyo\",                         HU: \"EU-London\",                         IS: \"EU-London\",                         IN: \"JP-Tokyo\",                         ID: \"JP-Tokyo\",                         IR: \"JP-Tokyo\",                         IQ: \"JP-Tokyo\",                         IE: \"EU-London\",                         IM: \"EU-London\",                         IL: \"JP-Tokyo\",                         IT: \"EU-London\",                         JM: \"US-Atlanta\",                         JP: \"JP-Tokyo\",                         JE: \"EU-London\",                         JO: \"JP-Tokyo\",                         KZ: \"JP-Tokyo\",                         KE: \"EU-London\",                         KI: \"SG-Singapore\",                         KP: \"JP-Tokyo\",                         KR: \"JP-Tokyo\",                         KW: \"JP-Tokyo\",                         KG: \"JP-Tokyo\",                         LA: \"JP-Tokyo\",                         LV: \"EU-London\",                         LB: \"JP-Tokyo\",                         LS: \"EU-London\",                         LR: \"EU-London\",                         LY: \"EU-London\",                         LI: \"EU-London\",                         LT: \"EU-London\",                         LU: \"EU-London\",                         MO: \"JP-Tokyo\",                         MK: \"EU-London\",                         MG: \"EU-London\",                         MW: \"EU-London\",                         MY: \"JP-Tokyo\",                         MV: \"JP-Tokyo\",                         ML: \"EU-London\",                         MT: \"EU-London\",                         MH: \"SG-Singapore\",                         MQ: \"US-Atlanta\",                         MR: \"EU-London\",                         MU: \"EU-London\",                         YT: \"EU-London\",                         MX: \"US-Atlanta\",                         FM: \"SG-Singapore\",                         MD: \"EU-London\",                         MC: \"EU-London\",                         MN: \"JP-Tokyo\",                         ME: \"EU-London\",                         MS: \"US-Atlanta\",                         MA: \"EU-London\",                         MZ: \"EU-London\",                         MM: \"JP-Tokyo\",                         NA: \"EU-London\",                         NR: \"SG-Singapore\",                         NP: \"JP-Tokyo\",                         NL: \"EU-London\",                         NC: \"SG-Singapore\",                         NZ: \"SG-Singapore\",                         NI: \"US-Atlanta\",                         NE: \"EU-London\",                         NG: \"EU-London\",                         NU: \"SG-Singapore\",                         NF: \"SG-Singapore\",                         MP: \"SG-Singapore\",                         NO: \"EU-London\",                         OM: \"JP-Tokyo\",                         PK: \"JP-Tokyo\",                         PW: \"SG-Singapore\",                         PS: \"JP-Tokyo\",                         PA: \"US-Atlanta\",                         PG: \"SG-Singapore\",                         PY: \"BR-Brazil\",                         PE: \"BR-Brazil\",                         PH: \"JP-Tokyo\",                         PN: \"SG-Singapore\",                         PL: \"EU-London\",                         PT: \"EU-London\",                         PR: \"US-Atlanta\",                         QA: \"JP-Tokyo\",                         RE: \"EU-London\",                         RO: \"EU-London\",                         RU: \"RU-Russia\",                         RW: \"EU-London\",                         BL: \"US-Atlanta\",                         SH: \"EU-London\",                         KN: \"US-Atlanta\",                         LC: \"US-Atlanta\",                         MF: \"US-Atlanta\",                         PM: \"US-Atlanta\",                         VC: \"US-Atlanta\",                         WS: \"SG-Singapore\",                         SM: \"EU-London\",                         ST: \"EU-London\",                         SA: \"EU-London\",                         SN: \"EU-London\",                         RS: \"EU-London\",                         SC: \"EU-London\",                         SL: \"EU-London\",                         SG: \"JP-Tokyo\",                         SX: \"US-Atlanta\",                         SK: \"EU-London\",                         SI: \"EU-London\",                         SB: \"SG-Singapore\",                         SO: \"EU-London\",                         ZA: \"EU-London\",                         SS: \"EU-London\",                         ES: \"EU-London\",                         LK: \"JP-Tokyo\",                         SD: \"EU-London\",                         SR: \"BR-Brazil\",                         SJ: \"EU-London\",                         SZ: \"EU-London\",                         SE: \"EU-London\",                         CH: \"EU-London\",                         SY: \"EU-London\",                         TW: \"JP-Tokyo\",                         TJ: \"JP-Tokyo\",                         TZ: \"EU-London\",                         TH: \"JP-Tokyo\",                         TL: \"JP-Tokyo\",                         TG: \"EU-London\",                         TK: \"SG-Singapore\",                         TO: \"SG-Singapore\",                         TT: \"US-Atlanta\",                         TN: \"EU-London\",                         TR: \"TK-Turkey\",                         TM: \"JP-Tokyo\",                         TC: \"US-Atlanta\",                         TV: \"SG-Singapore\",                         UG: \"EU-London\",                         UA: \"EU-London\",                         AE: \"EU-London\",                         GB: \"EU-London\",                         US: \"US-Atlanta\",                         UM: \"SG-Singapore\",                         VI: \"US-Atlanta\",                         UY: \"BR-Brazil\",                         UZ: \"JP-Tokyo\",                         VU: \"SG-Singapore\",                         VE: \"BR-Brazil\",                         VN: \"JP-Tokyo\",                         WF: \"SG-Singapore\",                         EH: \"EU-London\",                         YE: \"JP-Tokyo\",                         ZM: \"EU-London\",                         ZW: \"EU-London\"                     },                     L = null;                 d.connect = Ca;                  //UPDATE                 /**                  * Tells you if the game is in Dark mode.                  * @return Boolean for dark mode.                  */                 window.getDarkBool = function() {                     return ta;                 }                  /**                  * Tells you if the mass is shown.                  * @return Boolean for player's mass.                  */                 window.getMassBool = function() {                     return lb;                 }                  /**                  * This is a copy of everything that is shown on screen.                  * Normally stuff will time out when off the screen, this                  * memorizes everything that leaves the screen for a little                  * while longer.                  * @return The memory object.                  */                 window.getMemoryCells = function() {                     return interNodes;                 }                  /**                  * [getCellsArray description]                  * @return {[type]} [description]                  */                 window.getCellsArray = function() {                     return v;                 }                  /**                  * [getCellsArray description]                  * @return {[type]} [description]                  */                 window.getCells = function() {                     return E;                 }                  /**                  * Returns an array with all the player's cells.                  * @return Player's cells                  */                 window.getPlayer = function() {                     return k;                 }                  /**                  * The canvas' width.                  * @return Integer Width                  */                 window.getWidth = function() {                     return m;                 }                  /**                  * The canvas' height                  * @return Integer Height                  */                 window.getHeight = function() {                     return r;                 }                  /**                  * Scaling ratio of the canvas. The bigger this ration,                  * the further that you see.                  * @return Screen scaling ratio.                  */                 window.getRatio = function() {                     return h;                 }                  window.getZoomlessRatio = function() {                     return h2;                 }                  /**                  * [getOffsetX description]                  * @return {[type]} [description]                  */                 window.getOffsetX = function() {                     return aa;                 }                  window.getOffsetY = function() {                     return ba;                 }                  window.getX = function() {                     return s;                 }                  window.getY = function() {                     return t;                 }                  window.getPointX = function() {                     return ia;                 }                  window.getPointY = function() {                     return ja;                 }                  /**                  * The X location of the mouse.                  * @return Integer X                  */                 window.getMouseX = function() {                     return fa;                 }                  /**                  * The Y location of the mouse.                  * @return Integer Y                  */                 window.getMouseY = function() {                     return ga;                 }                  window.getMapStartX = function() {                     return pa;                 }                  window.getMapStartY = function() {                     return qa;                 }                  window.getMapEndX = function() {                     return ra;                 }                  window.getMapEndY = function() {                     return sa;                 }                  window.getScreenDistance = function() {                     var temp = screenDistance();                     return temp;                 }                  /**                  * A timestamp since the last time the server sent any data.                  * @return Last update timestamp                  */                 window.getLastUpdate = function() {                     return C;                 }                  window.getCurrentScore = function() {                   ",
      "fork": false,
      "url": "https://api.github.com/repos/mochtamvan/launcher.user.js",
      "forks_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/forks",
      "keys_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/keys{/key_id}",
      "collaborators_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/collaborators{/collaborator}",
      "teams_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/teams",
      "hooks_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/hooks",
      "issue_events_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/issues/events{/number}",
      "events_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/events",
      "assignees_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/assignees{/user}",
      "branches_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/branches{/branch}",
      "tags_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/tags",
      "blobs_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/git/blobs{/sha}",
      "git_tags_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/git/tags{/sha}",
      "git_refs_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/git/refs{/sha}",
      "trees_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/git/trees{/sha}",
      "statuses_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/statuses/{sha}",
      "languages_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/languages",
      "stargazers_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/stargazers",
      "contributors_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/contributors",
      "subscribers_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/subscribers",
      "subscription_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/subscription",
      "commits_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/commits{/sha}",
      "git_commits_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/git/commits{/sha}",
      "comments_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/comments{/number}",
      "issue_comment_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/issues/comments{/number}",
      "contents_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/contents/{+path}",
      "compare_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/compare/{base}...{head}",
      "merges_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/merges",
      "archive_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/{archive_format}{/ref}",
      "downloads_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/downloads",
      "issues_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/issues{/number}",
      "pulls_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/pulls{/number}",
      "milestones_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/notifications{?since,all,participating}",
      "labels_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/labels{/name}",
      "releases_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/releases{/id}",
      "deployments_url": "https://api.github.com/repos/mochtamvan/launcher.user.js/deployments",
      "created_at": "2015-11-01T05:20:24Z",
      "updated_at": "2015-11-01T05:20:24Z",
      "pushed_at": "2015-11-01T05:20:25Z",
      "git_url": "git://github.com/mochtamvan/launcher.user.js.git",
      "ssh_url": "git@github.com:mochtamvan/launcher.user.js.git",
      "clone_url": "https://github.com/mochtamvan/launcher.user.js.git",
      "svn_url": "https://github.com/mochtamvan/launcher.user.js",
      "homepage": null,
      "size": 0,
      "stargazers_count": 0,
      "watchers_count": 0,
      "language": null,
      "has_issues": true,
      "has_projects": true,
      "has_downloads": true,
      "has_wiki": true,
      "has_pages": false,
      "forks_count": 0,
      "mirror_url": null,
      "archived": false,
      "open_issues_count": 0,
      "license": null,
      "forks": 0,
      "open_issues": 0,
      "watchers": 0,
      "default_branch": "master",
      "score": 0.13192101
    }
  ]
}